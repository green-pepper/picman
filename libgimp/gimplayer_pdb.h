/* LIBPICMAN - The PICMAN Library
 * Copyright (C) 1995-2003 Peter Mattis and Spencer Kimball
 *
 * picmanlayer_pdb.h
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

/* NOTE: This file is auto-generated by pdbgen.pl */

#if !defined (__PICMAN_H_INSIDE__) && !defined (PICMAN_COMPILATION)
#error "Only <libpicman/picman.h> can be included directly."
#endif

#ifndef __PICMAN_LAYER_PDB_H__
#define __PICMAN_LAYER_PDB_H__

G_BEGIN_DECLS

/* For information look into the C source or the html documentation */


G_GNUC_INTERNAL gint32 _picman_layer_new                 (gint32                 image_ID,
                                                        gint                   width,
                                                        gint                   height,
                                                        PicmanImageType          type,
                                                        const gchar           *name,
                                                        gdouble                opacity,
                                                        PicmanLayerModeEffects   mode);
gint32                 picman_layer_new_from_visible     (gint32                 image_ID,
                                                        gint32                 dest_image_ID,
                                                        const gchar           *name);
gint32                 picman_layer_new_from_drawable    (gint32                 drawable_ID,
                                                        gint32                 dest_image_ID);
gint32                 picman_layer_group_new            (gint32                 image_ID);
G_GNUC_INTERNAL gint32 _picman_layer_copy                (gint32                 layer_ID,
                                                        gboolean               add_alpha);
gboolean               picman_layer_add_alpha            (gint32                 layer_ID);
gboolean               picman_layer_flatten              (gint32                 layer_ID);
gboolean               picman_layer_scale                (gint32                 layer_ID,
                                                        gint                   new_width,
                                                        gint                   new_height,
                                                        gboolean               local_origin);
PICMAN_DEPRECATED_FOR(picman_layer_scale)
gboolean               picman_layer_scale_full           (gint32                 layer_ID,
                                                        gint                   new_width,
                                                        gint                   new_height,
                                                        gboolean               local_origin,
                                                        PicmanInterpolationType  interpolation);
gboolean               picman_layer_resize               (gint32                 layer_ID,
                                                        gint                   new_width,
                                                        gint                   new_height,
                                                        gint                   offx,
                                                        gint                   offy);
gboolean               picman_layer_resize_to_image_size (gint32                 layer_ID);
gboolean               picman_layer_translate            (gint32                 layer_ID,
                                                        gint                   offx,
                                                        gint                   offy);
gboolean               picman_layer_set_offsets          (gint32                 layer_ID,
                                                        gint                   offx,
                                                        gint                   offy);
gint32                 picman_layer_create_mask          (gint32                 layer_ID,
                                                        PicmanAddMaskType        mask_type);
gint32                 picman_layer_get_mask             (gint32                 layer_ID);
gint32                 picman_layer_from_mask            (gint32                 mask_ID);
gboolean               picman_layer_add_mask             (gint32                 layer_ID,
                                                        gint32                 mask_ID);
gboolean               picman_layer_remove_mask          (gint32                 layer_ID,
                                                        PicmanMaskApplyMode      mode);
gboolean               picman_layer_is_floating_sel      (gint32                 layer_ID);
gboolean               picman_layer_get_lock_alpha       (gint32                 layer_ID);
gboolean               picman_layer_set_lock_alpha       (gint32                 layer_ID,
                                                        gboolean               lock_alpha);
gboolean               picman_layer_get_apply_mask       (gint32                 layer_ID);
gboolean               picman_layer_set_apply_mask       (gint32                 layer_ID,
                                                        gboolean               apply_mask);
gboolean               picman_layer_get_show_mask        (gint32                 layer_ID);
gboolean               picman_layer_set_show_mask        (gint32                 layer_ID,
                                                        gboolean               show_mask);
gboolean               picman_layer_get_edit_mask        (gint32                 layer_ID);
gboolean               picman_layer_set_edit_mask        (gint32                 layer_ID,
                                                        gboolean               edit_mask);
gdouble                picman_layer_get_opacity          (gint32                 layer_ID);
gboolean               picman_layer_set_opacity          (gint32                 layer_ID,
                                                        gdouble                opacity);
PicmanLayerModeEffects   picman_layer_get_mode             (gint32                 layer_ID);
gboolean               picman_layer_set_mode             (gint32                 layer_ID,
                                                        PicmanLayerModeEffects   mode);


G_END_DECLS

#endif /* __PICMAN_LAYER_PDB_H__ */
