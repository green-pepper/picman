/* LIBPICMAN - The PICMAN Library
 * Copyright (C) 1995-2003 Peter Mattis and Spencer Kimball
 *
 * picmancontext_pdb.h
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

/* NOTE: This file is auto-generated by pdbgen.pl */

#if !defined (__PICMAN_H_INSIDE__) && !defined (PICMAN_COMPILATION)
#error "Only <libpicman/picman.h> can be included directly."
#endif

#ifndef __PICMAN_CONTEXT_PDB_H__
#define __PICMAN_CONTEXT_PDB_H__

G_BEGIN_DECLS

/* For information look into the C source or the html documentation */


gboolean               picman_context_push                      (void);
gboolean               picman_context_pop                       (void);
gboolean               picman_context_set_defaults              (void);
gboolean               picman_context_list_paint_methods        (gint                     *num_paint_methods,
                                                               gchar                  ***paint_methods);
gchar*                 picman_context_get_paint_method          (void);
gboolean               picman_context_set_paint_method          (const gchar              *name);
gboolean               picman_context_get_foreground            (PicmanRGB                  *foreground);
gboolean               picman_context_set_foreground            (const PicmanRGB            *foreground);
gboolean               picman_context_get_background            (PicmanRGB                  *background);
gboolean               picman_context_set_background            (const PicmanRGB            *background);
gboolean               picman_context_set_default_colors        (void);
gboolean               picman_context_swap_colors               (void);
gdouble                picman_context_get_opacity               (void);
gboolean               picman_context_set_opacity               (gdouble                   opacity);
PicmanLayerModeEffects   picman_context_get_paint_mode            (void);
gboolean               picman_context_set_paint_mode            (PicmanLayerModeEffects      paint_mode);
gchar*                 picman_context_get_brush                 (void);
gboolean               picman_context_set_brush                 (const gchar              *name);
gdouble                picman_context_get_brush_size            (void);
gboolean               picman_context_set_brush_size            (gdouble                   size);
gboolean               picman_context_set_brush_default_size    (void);
gdouble                picman_context_get_brush_aspect_ratio    (void);
gboolean               picman_context_set_brush_aspect_ratio    (gdouble                   aspect);
gdouble                picman_context_get_brush_angle           (void);
gboolean               picman_context_set_brush_angle           (gdouble                   angle);
gchar*                 picman_context_get_dynamics              (void);
gboolean               picman_context_set_dynamics              (const gchar              *name);
gchar*                 picman_context_get_pattern               (void);
gboolean               picman_context_set_pattern               (const gchar              *name);
gchar*                 picman_context_get_gradient              (void);
gboolean               picman_context_set_gradient              (const gchar              *name);
gchar*                 picman_context_get_palette               (void);
gboolean               picman_context_set_palette               (const gchar              *name);
gchar*                 picman_context_get_font                  (void);
gboolean               picman_context_set_font                  (const gchar              *name);
gboolean               picman_context_get_antialias             (void);
gboolean               picman_context_set_antialias             (gboolean                  antialias);
gboolean               picman_context_get_feather               (void);
gboolean               picman_context_set_feather               (gboolean                  feather);
gboolean               picman_context_get_feather_radius        (gdouble                  *feather_radius_x,
                                                               gdouble                  *feather_radius_y);
gboolean               picman_context_set_feather_radius        (gdouble                   feather_radius_x,
                                                               gdouble                   feather_radius_y);
gboolean               picman_context_get_sample_merged         (void);
gboolean               picman_context_set_sample_merged         (gboolean                  sample_merged);
PicmanSelectCriterion    picman_context_get_sample_criterion      (void);
gboolean               picman_context_set_sample_criterion      (PicmanSelectCriterion       sample_criterion);
gdouble                picman_context_get_sample_threshold      (void);
gboolean               picman_context_set_sample_threshold      (gdouble                   sample_threshold);
gint                   picman_context_get_sample_threshold_int  (void);
gboolean               picman_context_set_sample_threshold_int  (gint                      sample_threshold);
gboolean               picman_context_get_sample_transparent    (void);
gboolean               picman_context_set_sample_transparent    (gboolean                  sample_transparent);
PicmanInterpolationType  picman_context_get_interpolation         (void);
gboolean               picman_context_set_interpolation         (PicmanInterpolationType     interpolation);
PicmanTransformDirection picman_context_get_transform_direction   (void);
gboolean               picman_context_set_transform_direction   (PicmanTransformDirection    transform_direction);
PicmanTransformResize    picman_context_get_transform_resize      (void);
gboolean               picman_context_set_transform_resize      (PicmanTransformResize       transform_resize);
gint                   picman_context_get_transform_recursion   (void);
gboolean               picman_context_set_transform_recursion   (gint                      transform_recursion);
gdouble                picman_context_get_ink_size              (void);
gboolean               picman_context_set_ink_size              (gdouble                   size);
gdouble                picman_context_get_ink_angle             (void);
gboolean               picman_context_set_ink_angle             (gdouble                   angle);
gdouble                picman_context_get_ink_size_sensitivity  (void);
gboolean               picman_context_set_ink_size_sensitivity  (gdouble                   size);
gdouble                picman_context_get_ink_tilt_sensitivity  (void);
gboolean               picman_context_set_ink_tilt_sensitivity  (gdouble                   tilt);
gdouble                picman_context_get_ink_speed_sensitivity (void);
gboolean               picman_context_set_ink_speed_sensitivity (gdouble                   speed);
PicmanInkBlobType        picman_context_get_ink_blob_type         (void);
gboolean               picman_context_set_ink_blob_type         (PicmanInkBlobType           type);
gdouble                picman_context_get_ink_blob_aspect_ratio (void);
gboolean               picman_context_set_ink_blob_aspect_ratio (gdouble                   aspect);
gdouble                picman_context_get_ink_blob_angle        (void);
gboolean               picman_context_set_ink_blob_angle        (gdouble                   angle);


G_END_DECLS

#endif /* __PICMAN_CONTEXT_PDB_H__ */
