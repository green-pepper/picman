# PICMAN - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@picman.org>

sub palettes_popup {
    $blurb = 'Invokes the Picman palette selection.';
    $help  = 'This procedure opens the palette selection dialog.';

    &mitch_pdb_misc('2002');

    @inargs = (
	{ name => 'palette_callback', type => 'string', non_empty => 1,
	  desc => 'The callback PDB proc to call when palette selection is
		   made' },
	{ name => 'popup_title', type => 'string',
	  desc => 'Title of the palette selection dialog' },
	{ name => 'initial_palette', type => 'string', null_ok => 1,
	  desc => 'The name of the palette to set as the first selected' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman->no_interface ||
      ! picman_pdb_lookup_procedure (picman->pdb, palette_callback) ||
      ! picman_pdb_dialog_new (picman, context, progress,
                             picman_data_factory_get_container (picman->palette_factory),
                             popup_title, palette_callback, initial_palette,
                             NULL))
    success = FALSE;
}
CODE
    );
}

sub palettes_close_popup {
    $blurb = 'Close the palette selection dialog.';
    $help  = 'This procedure closes an opened palette selection dialog.';

    &mitch_pdb_misc('2002');

    @inargs = (
	{ name => 'palette_callback', type => 'string', non_empty => 1,
	  desc => 'The name of the callback registered for this pop-up' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman->no_interface ||
      ! picman_pdb_lookup_procedure (picman->pdb, palette_callback) ||
      ! picman_pdb_dialog_close (picman, picman_data_factory_get_container (picman->palette_factory),
                               palette_callback))
    success = FALSE;
}
CODE
    );
}

sub palettes_set_popup {
    $blurb = 'Sets the current palette in a palette selection dialog.';
    $help  = $blurb;

    &mitch_pdb_misc('2002');

    @inargs = (
	{ name => 'palette_callback', type => 'string', non_empty => 1,
	  desc => 'The name of the callback registered for this pop-up' },
	{ name => 'palette_name', type => 'string',
	  desc => 'The name of the palette to set as selected' },
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman->no_interface ||
      ! picman_pdb_lookup_procedure (picman->pdb, palette_callback) ||
      ! picman_pdb_dialog_set (picman, picman_data_factory_get_container (picman->palette_factory),
                             palette_callback, palette_name,
                             NULL))
    success = FALSE;
}
CODE
    );
}


@headers = qw("core/picman.h"
              "core/picmandatafactory.h");

@procs = qw(palettes_popup
            palettes_close_popup
            palettes_set_popup);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Palette UI';
$doc_title = 'picmanpaletteselect';
$doc_short_desc = 'Functions providing a palette selection dialog.';
$doc_long_desc = 'Functions providing a palette selection dialog.';

1;
