# PICMAN - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@picman.org>

sub plug_in_autocrop {
    $blurb = 'Remove empty borders from the image';

    $help = <<'HELP';
Remove empty borders from the image.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image',
	  desc => 'Input image)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error))
    {
      gint x1, y1, x2, y2;

      if (picman_pickable_auto_shrink (PICMAN_PICKABLE (drawable),
                                     0, 0,
                                     picman_item_get_width  (PICMAN_ITEM (drawable)),
                                     picman_item_get_height (PICMAN_ITEM (drawable)),
                                     &x1, &y1, &x2, &y2))
        {
          gint off_x, off_y;

          picman_item_get_offset (PICMAN_ITEM (drawable), &off_x, &off_y);

          x1 += off_x; x2 += off_x;
          y1 += off_y; y2 += off_y;

          picman_image_undo_group_start (image, PICMAN_UNDO_GROUP_ITEM_RESIZE,
                                       _("Autocrop image"));

          picman_image_crop (image, context,
                           x2 - x1, y2 - y1, -x1, -y1, TRUE);

          picman_image_undo_group_end (image);
        }
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_autocrop_layer {
    $blurb = 'Remove empty borders from the layer';

    $help = <<'HELP';
Remove empty borders from the layer.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image',
	  desc => 'Input image)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error))
    {
      PicmanLayer *layer = picman_image_get_active_layer (image);
      gint       x1, y1, x2, y2;

      if (layer &&
          picman_pickable_auto_shrink (PICMAN_PICKABLE (drawable),
                                     0, 0,
                                     picman_item_get_width  (PICMAN_ITEM (drawable)),
                                     picman_item_get_height (PICMAN_ITEM (drawable)),
                                     &x1, &y1, &x2, &y2))
        {
          picman_image_undo_group_start (image, PICMAN_UNDO_GROUP_ITEM_RESIZE,
                                       _("Autocrop layer"));

          picman_item_resize (PICMAN_ITEM (layer), context,
                            x2 - x1, y2 - y1, -x1, -y1);

          picman_image_undo_group_end (image);
        }
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_colortoalpha {
    $blurb = 'Convert a specified color to transparency';

    $help = <<'HELP';
This replaces as much of a given color as possible in each pixel with
a corresponding amount of alpha, then readjusts the color accordingly.
HELP

    &std_pdb_misc;
    $date = '1999';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'color', type => 'color',
	  desc => 'Color to remove' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      /* XXX: fixme disable for gray, and add alpha when needed */

      GeglColor *gegl_color = picman_gegl_color_new (&color);
      GeglNode  *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:color-to-alpha",
                             "color",     gegl_color,
                             NULL);
      g_object_unref (gegl_color);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Color to Alpha"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_pixelize {
    $blurb = 'Simplify image into an array of solid-colored squares';

    $help = <<'HELP';
Pixelize the contents of the specified drawable with specified
pixelizing width.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'pixel_width', type => '1 <= int32 <= PICMAN_MAX_IMAGE_SIZE',
	  desc => 'Pixel width (the decrease in resolution)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:pixelise",
                             "size-x",    pixel_width,
                             "size-y",    pixel_width,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Pixelize"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_pixelize2 {
    $blurb = 'Simplify image into an array of solid-colored rectangles';

    $help = <<'HELP';
Pixelize the contents of the specified drawable with specified
pixelizing width and height.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'pixel_width', type => '1 <= int32 <= PICMAN_MAX_IMAGE_SIZE',
	  desc => 'Pixel width (the decrease in horizontal resolution)' },
	{ name => 'pixel_height', type => '1 <= int32 <= PICMAN_MAX_IMAGE_SIZE',
	  desc => 'Pixel height (the decrease in vertical resolution)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:pixelise",
                             "size-x",    pixel_width,
                             "size-y",    pixel_height,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Pixelize"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_polar_coords {
    $blurb = 'Convert image to or from polar coordinates';

    $help = <<'HELP';
Remaps and image from rectangular coordinates to polar coordinates or
vice versa.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'circle', type => '0.0 <= float <= 100.0',
	  desc => 'Circle depth in %' },
	{ name => 'angle', type => '0.0 <= float < 360.0',
	  desc => 'Offset angle' },
	{ name => 'backwards', type => 'boolean',
	  desc => 'Map backwards' },
	{ name => 'inverse', type => 'boolean',
	  desc => 'Map from top' },
	{ name => 'polrec', type => 'boolean',
	  desc => 'Polar to rectangular' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:polar-coords",
                             "depth",     circle,
                             "angle",     angle,
                             "bw",        backwards, /* XXX name */
                             "top",       inverse,
                             "polar",     polrec,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Polar Coordinates"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_randomize_hurl {
    $blurb = 'Completely randomize a fraction of pixels';

    $help = <<'HELP';
This plug-in "hurls" randomly-valued pixels onto the selection or
image.  You may select the percentage of pixels to modify and the
number of times to repeat the process.
HELP

    &std_pdb_compat('gegl:noise-hurl');
    $date = '2013';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
        { name => 'rndm_pct', type => '1.0 <= float <= 100.0',
          desc => 'Randomization percentage' },
        { name => 'rndm_rcount', type => '1.0 <= float <= 100.0',
          desc => 'Repeat count' },
        { name => 'randomize', type => 'boolean',
          desc => 'Use random seed' },
        { name => 'seed', type => 'int32',
          desc => 'Seed value (used only if randomize is FALSE)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      GeglNode *node;

      if (randomize)
        seed = g_random_int ();

      node =
        gegl_node_new_child (NULL,
                             "operation",  "gegl:noise-hurl",
                             "seed",       seed,
                             "pct-random", rndm_pct,
                             "repeat",     (gint) rndm_rcount,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Random Hurl"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_randomize_pick {
    $blurb = 'Randomly interchange some pixels with neighbors';

    $help = <<'HELP';
This plug-in replaces a pixel with a random adjacent pixel.  You may
select the percentage of pixels to modify and the number of times to
repeat the process.
HELP

    &std_pdb_compat('gegl:noise-pick');
    $date = '2013';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
        { name => 'rndm_pct', type => '1.0 <= float <= 100.0',
          desc => 'Randomization percentage' },
        { name => 'rndm_rcount', type => '1.0 <= float <= 100.0',
          desc => 'Repeat count' },
        { name => 'randomize', type => 'boolean',
          desc => 'Use random seed' },
        { name => 'seed', type => 'int32',
          desc => 'Seed value (used only if randomize is FALSE)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      GeglNode *node;

      if (randomize)
        seed = g_random_int ();

      node =
        gegl_node_new_child (NULL,
                             "operation",  "gegl:noise-pick",
                             "seed",       seed,
                             "pct-random", rndm_pct,
                             "repeat",     (gint) rndm_rcount,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Random Pick"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_randomize_slur {
    $blurb = 'Randomly slide some pixels downward (similar to melting';

    $help = <<'HELP';
This plug-in "slurs" (melts like a bunch of icicles) an image.  You may
select the percentage of pixels to modify and the number of times to
repeat the process.
HELP

    &std_pdb_compat('gegl:noise-slur');
    $date = '2013';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
        { name => 'rndm_pct', type => '1.0 <= float <= 100.0',
          desc => 'Randomization percentage' },
        { name => 'rndm_rcount', type => '1.0 <= float <= 100.0',
          desc => 'Repeat count' },
        { name => 'randomize', type => 'boolean',
          desc => 'Use random seed' },
        { name => 'seed', type => 'int32',
          desc => 'Seed value (used only if randomize is FALSE)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      GeglNode *node;

      if (randomize)
        seed = g_random_int ();

      node =
        gegl_node_new_child (NULL,
                             "operation",  "gegl:noise-slur",
                             "seed",       seed,
                             "pct-random", rndm_pct,
                             "repeat",     (gint) rndm_rcount,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Random Slur"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_semiflatten {
    $blurb = 'Replace partial transparency with the current background color';

    $help = <<'HELP';
This plugin flattens pixels in an RGBA image that aren't completely
transparent against the current PICMAN background color.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error) &&
      picman_drawable_has_alpha (drawable))
    {
      GeglNode *node;
      PicmanRGB   color;

      picman_context_get_background (context, &color);

      node =
        gegl_node_new_child (NULL,
                             "operation", "picman:semi-flatten",
                             "color",     &color,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Semi-Flatten"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_threshold_alpha {
    $blurb = 'Make transparency all-or-nothing';

    $help = <<'HELP';
Make transparency all-or-nothing.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'threshold', type => '0 <= int32 <= 255',
	  desc => 'Threshold' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error) &&
      picman_drawable_has_alpha (drawable))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "picman:threshold-alpha",
                             "value",     threshold / 255.0,
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Threshold Alpha"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_vinvert {
    $blurb = 'Invert the brightness of each pixel';

    $help = <<'HELP';
This function takes an indexed/RGB image and inverts its 'value' in
HSV space.  The upshot of this is that the color and saturation at any
given point remains the same, but its brightness is effectively
inverted.  Quite strange.  Sometimes produces unpleasant color
artifacts on images from lossy sources (ie. JPEG).
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum PicmanRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (picman_pdb_item_is_attached (PICMAN_ITEM (drawable), NULL,
                                 PICMAN_PDB_ITEM_CONTENT, error) &&
      picman_pdb_item_is_not_group (PICMAN_ITEM (drawable), error))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:value-invert",
                             NULL);

      picman_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Value Invert"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw("libpicmanbase/picmanbase.h"
              "gegl/picman-gegl-utils.h"
              "core/picmancontext.h"
              "core/picmandrawable.h"
              "core/picmandrawable-operation.h"
              "core/picmanimage-crop.h"
              "core/picmanimage-undo.h"
              "core/picmanpickable.h"
              "core/picmanpickable-auto-shrink.h"
              "picmanpdb-utils.h"
              "picman-intl.h");

@procs = qw(plug_in_autocrop
            plug_in_autocrop_layer
            plug_in_colortoalpha
            plug_in_pixelize
            plug_in_pixelize2
            plug_in_polar_coords
            plug_in_randomize_hurl
            plug_in_randomize_pick
            plug_in_randomize_slur
            plug_in_semiflatten
            plug_in_threshold_alpha
            plug_in_vinvert);

%exports = (app => [@procs], lib => []);

$desc = 'Plug-In Compat';
$doc_title = 'plugincolor';
$doc_short_desc = 'Compatibility for removed plug-ins.';
$doc_long_desc = 'Functions that perform the operation of removed plug-ins using GEGL operations.';

1;
