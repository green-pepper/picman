# PICMAN - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@picman.org>

sub palettes_refresh {
    $blurb = 'Refreshes current palettes. This function always succeeds.';

    $help = <<'HELP';
This procedure retrieves all palettes currently in the user's palette path
and updates the palette dialogs accordingly.
HELP

    &adrian_pdb_misc('1998');

    %invoke = (
        code => <<'CODE'
{
  picman_data_factory_data_refresh (picman->palette_factory, context);
}
CODE
    );
}

sub palettes_get_list {
    $blurb = 'Retrieves a list of all of the available palettes';

    $help = <<'HELP';
This procedure returns a complete listing of available palettes. Each name
returned can be used as input to the command picman_context_set_palette().
HELP

    &rock_pdb_misc('2001');

    @inargs = (
	{ name => 'filter', type => 'string', null_ok => 1,
          desc => 'An optional regular expression used to filter the list' }
    );

    @outargs = (
        { name => 'palette_list', type => 'stringarray',
          desc => 'The list of palette names',
          array => { name => 'num_palettes',
                     desc => 'The number of palettes in the list' } }
    );

    %invoke = (
        headers => [ qw("core/picmancontainer-filter.h") ],
        code    => <<'CODE'
{
  palette_list = picman_container_get_filtered_name_array (picman_data_factory_get_container (picman->palette_factory),
                                                         filter, &num_palettes);
}
CODE
    );
}

sub palettes_get_palette {
    &std_pdb_deprecated ('picman-context-get-palette');

    @outargs = (
	{ name => 'name', type => 'string', null_ok => 1,
	  desc => 'The palette name' },
	{ name => 'num_colors', type => 'int32',
	  desc => 'The palette num_colors' }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanPalette *palette = picman_context_get_palette (context);

  if (palette)
    {
      name       = g_strdup (picman_object_get_name (palette));
      num_colors = picman_palette_get_n_colors (palette);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palettes_get_palette_entry {
    &std_pdb_deprecated ('picman-palette-entry-get-color');

    @inargs = (
	{ name => 'name', type => 'string', null_ok => 1,
	  desc => 'The palette name ("" means currently active palette)' },
        { name => 'entry_num', type => 'int32',
          desc => 'The entry to retrieve' }
    );

    @outargs = (
	{ name => 'actual_name', type => 'string',
	  desc => 'The palette name' },
	{ name => 'num_colors', type => 'int32',
	  desc => 'The palette num_colors' },
	{ name => 'color', type => 'color', void_ret => 1,
	  desc => 'The color requested' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanPalette *palette;

  if (name && strlen (name))
    palette = picman_pdb_get_palette (picman, name, FALSE, error);
  else
    palette = picman_context_get_palette (context);

  if (palette)
    {
      PicmanPaletteEntry *entry = picman_palette_get_entry (palette, entry_num);

      if (entry)
        {
          actual_name = g_strdup (picman_object_get_name (palette));
          num_colors  = picman_palette_get_n_colors (palette);
          color       = entry->color;
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h>
              "core/picman.h"
              "core/picmancontext.h"
              "core/picmandatafactory.h"
              "core/picmanpalette.h"
              "picmanpdb-utils.h");

@procs = qw(palettes_refresh
            palettes_get_list
            palettes_get_palette
            palettes_get_palette_entry);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Palettes';
$doc_title = 'picmanpalettes';
$doc_short_desc = 'Operations related to palettes.';
$doc_long_desc = 'Operations related to palettes.';

1;
