# PICMAN - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@picman.org>

sub pdb_misc {
   $author = 'Michael Natterer <mitch@picman.org> & Sven Neumann <sven@picman.org>';
   $copyright = 'Michael Natterer & Sven Neumann';
   $date = '2004';
   $since = '2.2';
}

sub context_push {
    $blurb = 'Pushes a context to the top of the plug-in\'s context stack.';

    $help = <<'HELP';
This procedure creates a new context by copying the current context. This
copy becomes the new current context for the calling plug-in until it is
popped again using picman_context_pop().
HELP

    &pdb_misc;

    %invoke = (
	code => <<'CODE'
{
  PicmanPlugIn *plug_in = picman->plug_in_manager->current_plug_in;

  if (plug_in && plug_in->open)
    success = picman_plug_in_context_push (plug_in);
  else
    success = FALSE;
}
CODE
    );
}

sub context_pop {
    $blurb = 'Pops the topmost context from the plug-in\'s context stack.';

    $help = <<'HELP';
This procedure removes the topmost context from the plug-in's context
stack.  The context that was active before the corresponding call to
picman_context_push() becomes the new current context of the plug-in.
HELP

    &pdb_misc;

    %invoke = (
	code => <<'CODE'
{
  PicmanPlugIn *plug_in = picman->plug_in_manager->current_plug_in;

  if (plug_in && plug_in->open)
    success = picman_plug_in_context_pop (plug_in);
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_defaults {
    $blurb = 'Reset context settings to their default values.';

    $help = <<'HELP';
This procedure resets context settings used by various procedures to their
default value. This procedure will usually be called after a context push
so that a script which calls procedures affected by context settings will
not be affected by changes in the global context.
HELP

    $author = 'Kevin Cozens <kcozens@svn.gnome.org>';
    $copyright = 'Kevin Cozens';
    $date = '2011';
    $since = '2.8';

    %invoke = (
	code => <<'CODE'
{
    picman_config_reset (PICMAN_CONFIG (context));
}
CODE
    );
}

sub context_get_paint_method {
    $blurb = 'Retrieve the currently active paint method.';

    $help = <<'HELP';
This procedure returns the name of the currently active paint method.
HELP

    &mitch_pdb_misc('2005', '2.4');

    @outargs = (
	{ name  => 'name', type  => 'string',
	  desc  => 'The name of the active paint method' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanPaintInfo *paint_info = picman_context_get_paint_info (context);

  if (paint_info)
    name = g_strdup (picman_object_get_name (paint_info));
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_paint_method {
    $blurb = 'Set the specified paint method as the active paint method.';

    $help = <<'HELP';
This procedure allows the active paint method to be set by specifying
its name.  The name is simply a string which corresponds to one of the
names of the available paint methods. If there is no matching method
found, this procedure will return an error.  Otherwise, the specified
method becomes active and will be used in all subsequent paint
operations.
HELP

    &mitch_pdb_misc('2005', '2.4');

    @inargs = (
        { name => 'name', type => 'string', non_empty => 1,
          desc => 'The name of the paint method' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanPaintInfo *paint_info = picman_pdb_get_paint_info (picman, name, error);

  if (paint_info)
    picman_context_set_paint_info (context, paint_info);
  else
    success = FALSE;
}
CODE
    );
}

sub context_list_paint_methods {
    $blurb = 'Lists the available paint methods.';

    $help = <<'HELP';
This procedure lists the names of the available paint methods. Any
of the results can be used for picman_context_set_paint_method().
HELP

    &simon_pdb_misc('2007', '2.4');

    @outargs = (
        { name => 'paint_methods', type => 'stringarray', void_ret => 1,
          desc => 'The names of the available paint methods',
          array => { desc => 'The number of the available paint methods' } }
    );

    %invoke = (
        code => <<'CODE'
{
  paint_methods = picman_container_get_name_array (picman->paint_info_list,
                                                 &num_paint_methods);
}
CODE
    );
}


sub context_get_foreground {
    $blurb = "Get the current PICMAN foreground color.";

    $help = <<'HELP';
This procedure returns the current PICMAN foreground color. The foreground
color is used in a variety of tools such as paint tools, blending, and bucket
fill.
HELP

    &pdb_misc;

    @outargs = (
        { name => 'foreground', type => 'color', void_ret => 1,
          desc => 'The foreground color' }
    );

    %invoke = (
	code => <<'CODE'
{
  picman_context_get_foreground (context, &foreground);
  picman_rgb_set_alpha (&foreground, 1.0);
}
CODE
    );
}

sub context_set_foreground {
    $blurb = "Set the current PICMAN foreground color.";

    $help = <<'HELP';
This procedure sets the current PICMAN foreground color. After this is set,
operations which use foreground such as paint tools, blending, and bucket fill
will use the new value.
HELP

    &pdb_misc;

    @inargs = (
        { name => 'foreground', type => 'color', void_ret => 1,
          desc => 'The foreground color' }
    );

    %invoke = (
	code => <<'CODE'
{
  picman_rgb_set_alpha (&foreground, 1.0);
  picman_context_set_foreground (context, &foreground);
}
CODE
    );
}

sub context_get_background {
    $blurb = "Get the current PICMAN background color.";

    $help = <<'HELP';
This procedure returns the current PICMAN background color. The background
color is used in a variety of tools such as blending, erasing (with non-alpha
images), and image filling.
HELP

    &pdb_misc;

    @outargs = (
        { name => 'background', type => 'color', void_ret => 1,
          desc => 'The background color' }
    );

    %invoke = (
	code => <<'CODE'
{
  picman_context_get_background (context, &background);
  picman_rgb_set_alpha (&background, 1.0);
}
CODE
    );
}

sub context_set_background {
    $blurb = "Set the current PICMAN background color.";

    $help = <<'HELP';
This procedure sets the current PICMAN background color. After this is set,
operations which use background such as blending, filling images, clearing,
and erasing (in non-alpha images) will use the new value.
HELP

    &pdb_misc;

    @inargs = (
        { name => 'background', type => 'color', void_ret => 1,
          desc => 'The background color' }
    );

    %invoke = (
	code => <<'CODE'
{
  picman_rgb_set_alpha (&background, 1.0);
  picman_context_set_background (context, &background);
}
CODE
    );
}

sub context_set_default_colors {
    $blurb = <<'BLURB';
Set the current PICMAN foreground and background colors to black and white.
BLURB

    $help = <<'HELP';
This procedure sets the current PICMAN foreground and background colors to their
initial default values, black and white.
HELP

    &pdb_misc;

    %invoke = (
	code => <<'CODE'
{
  picman_context_set_default_colors (context);
}
CODE
    );
}

sub context_swap_colors {
    $blurb = 'Swap the current PICMAN foreground and background colors.';

    $help = <<'HELP';
This procedure swaps the current PICMAN foreground and background colors, so that
the new foreground color becomes the old background color and vice versa.
HELP

    &pdb_misc;

    %invoke = (
	code => <<'CODE'
{
  picman_context_swap_colors (context);
}
CODE
    );
}

sub context_get_opacity {
    $blurb = 'Get the opacity.';

    $help = <<'HELP';
This procedure returns the opacity setting. The return
value is a floating point number between 0 and 100.
HELP

    &pdb_misc;

    @outargs = (
        { name => 'opacity', type => '0 <= float <= 100',
          desc => 'The opacity' }
    );

    %invoke = (
	code => <<'CODE'
{
  opacity = picman_context_get_opacity (context) * 100.0;
}
CODE
    );
}

sub context_set_opacity {
    $blurb = 'Set the opacity.';

    $help = <<'HELP';
This procedure modifies the opacity setting. The value
should be a floating point number between 0 and 100.
HELP

    &pdb_misc;

    @inargs = (
        { name => 'opacity', type => '0 <= float <= 100',
          desc => 'The opacity' }
    );

    %invoke = (
	code => <<'CODE'
{
  picman_context_set_opacity (context, opacity / 100.0);
}
CODE
    );
}

sub context_get_paint_mode {
    $blurb = 'Get the paint mode.';

    $help = <<'HELP';
This procedure returns the paint-mode setting. The return value
is an integer which corresponds to the values listed in the argument
description.
HELP

    &pdb_misc;

    @outargs = (
        { name => 'paint_mode', type => 'enum PicmanLayerModeEffects',
          desc => 'The paint mode' }
    );

    %invoke = (
	code => <<'CODE'
{
  paint_mode = picman_context_get_paint_mode (context);
}
CODE
    );
}

sub context_set_paint_mode {
    $blurb = 'Set the paint mode.';

    $help = <<'HELP';
This procedure modifies the paint_mode setting.
HELP

    &pdb_misc;

    @inargs = (
        { name => 'paint_mode', type => 'enum PicmanLayerModeEffects',
          desc => 'The paint mode' }
    );

    %invoke = (
	code => <<'CODE'
{
  picman_context_set_paint_mode (context, paint_mode);
}
CODE
    );
}

sub context_get_brush {
    $blurb = 'Retrieve the currently active brush.';

    $help = <<'HELP';
This procedure returns the name of the currently active brush.
All paint operations and stroke operations use this brush to control
the application of paint to the image.
HELP

    &pdb_misc;

    @outargs = (
	{ name  => 'name', type  => 'string',
	  desc  => 'The name of the active brush' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanBrush *brush = picman_context_get_brush (context);

  if (brush)
    name = g_strdup (picman_object_get_name (brush));
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_brush {
    $blurb = 'Set the specified brush as the active brush.';

    $help = <<'HELP';
This procedure allows the active brush to be set by specifying its name.
The name is simply a string which corresponds to one of the names of the
installed brushes. If there is no matching brush found, this procedure will
return an error.  Otherwise, the specified brush becomes active and will be
used in all subsequent paint operations.
HELP

    &pdb_misc;

    @inargs = (
        { name => 'name', type => 'string', non_empty => 1,
          desc => 'The name of the brush' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanBrush *brush = picman_pdb_get_brush (picman, name, FALSE, error);

  if (brush)
    picman_context_set_brush (context, brush);
  else
    success = FALSE;
}
CODE
    );
}

sub context_get_brush_size {
    $blurb = 'Get brush size in pixels.';
    $help = 'Get the brush size in pixels for brush based paint tools.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "size", type => "0 < float",
          desc => "brush size in pixels" }
    );

    %invoke = (
	code => <<'CODE'
{
  /* all options should have the same value, so pick a random one */
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-paintbrush");

  if (options)
    g_object_get (options,
                  "brush-size", &size,
                   NULL);
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_brush_size {
    $blurb = 'Set brush size in pixels.';
    $help = 'Set the brush size in pixels for brush based paint tools.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "size", type => "0 < float",
          desc => "brush size in pixels" }
    );

    %invoke = (
	code => <<'CODE'
{
  GList *options;
  GList *list;

  options = picman_pdb_context_get_brush_options (PICMAN_PDB_CONTEXT (context));

  for (list = options; list; list = g_list_next (list))
    g_object_set (list->data,
                  "brush-size", (gdouble) size,
                   NULL);

  g_list_free (options);
}
CODE
    );
}

sub context_set_brush_default_size {
    $blurb = 'Set brush size to its default.';
    $help = <<'HELP';
Set the brush size to the default (max of width and height) for
paintbrush, airbrush, or pencil tools.
HELP

    &ejs_pdb_misc('2012', '2.8');

    %invoke = (
	code => <<'CODE'
{
  PicmanBrush *brush = picman_context_get_brush (context);

  if (brush)
    {
      GList *options;
      GList *list;

      options = picman_pdb_context_get_brush_options (PICMAN_PDB_CONTEXT (context));

      for (list = options; list; list = g_list_next (list))
        g_object_set (list->data,
                      "brush-size",
                      (gdouble) MAX (picman_temp_buf_get_width  (brush->mask),
                                     picman_temp_buf_get_height (brush->mask)),
                      NULL);

      g_list_free (options);
    }
  else
    {
      success = FALSE;
    }
}
CODE
    );
}

sub context_set_brush_aspect_ratio {
    $blurb = 'Set brush aspect ratio.';
    $help = 'Set the aspect ratio for brush based paint tools.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "aspect", type => "-20 <= float <= 20",
          desc => "aspect ratio" }
    );

    %invoke = (
	code => <<'CODE'
{
  GList *options;
  GList *list;

  options = picman_pdb_context_get_brush_options (PICMAN_PDB_CONTEXT (context));

  for (list = options; list; list = g_list_next (list))
    g_object_set (list->data,
                  "brush-aspect-ratio", (gdouble) aspect,
                   NULL);

  g_list_free (options);
}
CODE
    );
}

sub context_get_brush_aspect_ratio {
    $blurb = 'Get brush aspect ratio.';
    $help = 'Set the aspect ratio for brush based paint tools.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "aspect", type => "-20 <= float <= 20",
          desc => "aspect ratio" }
    );

    %invoke = (
	code => <<'CODE'
{
  /* all options should have the same value, so pick a random one */
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-paintbrush");

  if (options)
    g_object_get (options,
                  "brush-aspect-ratio", &aspect,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_brush_angle {
    $blurb = 'Set brush angle in degrees.';
    $help = 'Set the angle in degrees for brush based paint tools.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
	{ name => "angle", type => "-180 <= float <= 180",
	  desc => "angle in degrees" }
    );

    %invoke = (
	code => <<'CODE'
{
  GList *options;
  GList *list;

  options = picman_pdb_context_get_brush_options (PICMAN_PDB_CONTEXT (context));

  for (list = options; list; list = g_list_next (list))
    g_object_set (list->data,
                  "brush-angle", (gdouble) angle,
                   NULL);

  g_list_free (options);
}
CODE
    );
}

sub context_get_brush_angle {
    $blurb = 'Get brush angle in degrees.';
    $help = 'Set the angle in degrees for brush based paint tools.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
	{ name => "angle", type => "-180 <= float <= 180",
	  desc => "angle in degrees" }
    );

    %invoke = (
	code => <<'CODE'
{
  /* all options should have the same value, so pick a random one */
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-paintbrush");

  if (options)
    g_object_get (options,
                  "brush-angle", &angle,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}

sub context_get_dynamics {
    $blurb = 'Retrieve the currently active paint dynamics.';

    $help = <<'HELP';
This procedure returns the name of the currently active paint
dynamics.  All paint operations and stroke operations use this paint
dynamics to control the application of paint to the image.
HELP

    &mitch_pdb_misc('2011', '2.8');

    @outargs = (
	{ name  => 'name', type  => 'string',
	  desc  => 'The name of the active paint dynamics' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanDynamics *dynamics = picman_context_get_dynamics (context);

  if (dynamics)
    name = g_strdup (picman_object_get_name (dynamics));
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_dynamics {
    $blurb = 'Set the specified paint dynamics as the active paint dynamics.';

    $help = <<'HELP';
This procedure allows the active paint dynamics to be set by
specifying its name.  The name is simply a string which corresponds to
one of the names of the installed paint dynamics. If there is no
matching paint dynamics found, this procedure will return an error.
Otherwise, the specified paint dynamics becomes active and will be
used in all subsequent paint operations.
HELP

    &mitch_pdb_misc('2011', '2.8');

    @inargs = (
        { name => 'name', type => 'string', non_empty => 1,
          desc => 'The name of the paint dynamics' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanDynamics *dynamics = picman_pdb_get_dynamics (picman, name, FALSE, error);

  if (dynamics)
    picman_context_set_dynamics (context, dynamics);
  else
    success = FALSE;
}
CODE
    );
}

sub context_get_pattern {
    $blurb = 'Retrieve the currently active pattern.';

    $help = <<'HELP';
This procedure returns name of the the currently active pattern.
All clone and bucket-fill operations with patterns will use this
pattern to control the application of paint to the image.
HELP

    &pdb_misc;

    @outargs = (
	{ name  => 'name', type  => 'string',
	  desc  => 'The name of the active pattern' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanPattern *pattern = picman_context_get_pattern (context);

  if (pattern)
    name = g_strdup (picman_object_get_name (pattern));
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_pattern {
    $blurb = 'Set the specified pattern as the active pattern.';

    $help = <<'HELP';
This procedure allows the active pattern to be set by specifying its name.
The name is simply a string which corresponds to one of the names of the
installed patterns. If there is no matching pattern found, this procedure will
return an error. Otherwise, the specified pattern becomes active and will be
used in all subsequent paint operations.
HELP

    &pdb_misc;

    @inargs = (
        { name => 'name', type => 'string', non_empty => 1,
          desc => 'The name of the pattern' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanPattern *pattern = picman_pdb_get_pattern (picman, name, error);

  if (pattern)
    picman_context_set_pattern (context, pattern);
  else
    success = FALSE;
}
CODE
    );
}

sub context_get_gradient {
    $blurb = 'Retrieve the currently active gradient.';

    $help = <<'HELP';
This procedure returns the name of the currently active gradient.
HELP

    &pdb_misc;

    @outargs = (
	{ name  => 'name', type  => 'string',
	  desc  => 'The name of the active gradient' }
    );

    %invoke = (
	code => <<'CODE'
{
  PicmanGradient *gradient = picman_context_get_gradient (context);

  if (gradient)
    name = g_strdup (picman_object_get_name (gradient));
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_gradient {
    $blurb = 'Sets the specified gradient as the active gradient.';

    $help = <<'HELP';
This procedure lets you set the specified gradient as the active or "current"
one. The name is simply a string which corresponds to one of the loaded
gradients. If no matching gradient is found, this
procedure will return an error. Otherwise, the specified gradient will become
active and will be used for subsequent custom gradient operations.
HELP

    &pdb_misc;

    @inargs = (
	{ name => 'name', type => 'string', non_empty => 1,
	  desc => 'The name of the gradient' }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanGradient *gradient = picman_pdb_get_gradient (picman, name, FALSE, error);

  if (gradient)
    picman_context_set_gradient (context, gradient);
  else
    success = FALSE;
}
CODE
    );
}

sub context_get_palette {
    $blurb = 'Retrieve the currently active palette.';

    $help = <<'HELP';
This procedure returns the name of the the currently active palette.
HELP

    &pdb_misc;

    @outargs = (
	{ name  => 'name', type  => 'string',
	  desc  => 'The name of the active palette' }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanPalette *palette = picman_context_get_palette (context);

  if (palette)
    name = g_strdup (picman_object_get_name (palette));
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_palette {
    $blurb = 'Set the specified palette as the active palette.';

    $help = <<'HELP';
This procedure allows the active palette to be set by specifying its name.
The name is simply a string which corresponds to one of the names of the
installed palettes. If no matching palette is found, this procedure will
return an error. Otherwise, the specified palette becomes active and will be
used in all subsequent palette operations.
HELP

    &pdb_misc;

    @inargs = (
	{ name => 'name', type => 'string', non_empty => 1,
	  desc => 'The name of the palette' }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanPalette *palette = picman_pdb_get_palette (picman, name, FALSE, error);

  if (palette)
    picman_context_set_palette (context, palette);
  else
    success = FALSE;
}
CODE
    );
}

sub context_get_font {
    $blurb = 'Retrieve the currently active font.';

    $help = <<'HELP';
This procedure returns the name of the currently active font.
HELP

    &pdb_misc;

    @outargs = (
	{ name  => 'name', type  => 'string',
	  desc  => 'The name of the active font' }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanFont *font = picman_context_get_font (context);

  if (font)
    name = g_strdup (picman_object_get_name (font));
  else
    success = FALSE;
}
CODE
    );
}

sub context_set_font {
    $blurb = 'Set the specified font as the active font.';

    $help = <<'HELP';
This procedure allows the active font to be set by specifying its name.
The name is simply a string which corresponds to one of the names of the
installed fonts. If no matching font is found, this procedure will
return an error. Otherwise, the specified font becomes active and will be
used in all subsequent font operations.
HELP

    &pdb_misc;

    @inargs = (
	{ name => 'name', type => 'string', non_empty => 1,
	  desc => 'The name of the font' }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanFont *font = picman_pdb_get_font (picman, name, error);

  if (font)
    picman_context_set_font (context, font);
  else
    success = FALSE;
}
CODE
    );
}

sub context_get_antialias {
    $blurb = 'Get the antialias setting.';

    $help = <<'HELP';
This procedure returns the antialias setting.
HELP

    &mitch_pdb_misc('2010', '2.8');

    @outargs = (
        { name => 'antialias', type => 'boolean',
          desc => 'The antialias setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "antialias", &antialias,
                NULL);
}
CODE
    );
}

sub context_set_antialias {
    $blurb = 'Set the antialias setting.';

    $help = <<'HELP';
This procedure modifies the antialias setting. If antialiasing is
turned on, the edges of selected region will contain intermediate
values which give the appearance of a sharper, less pixelized edge.
This should be set as TRUE most of the time unless a binary-only
selection is wanted.

This settings affects the following procedures:
picman_image_select_color(), picman_image_select_contiguous_color(),
picman_image_select_round_rectangle(), picman_image_select_ellipse(),
picman_image_select_polygon(), picman_image_select_item().
HELP

    &mitch_pdb_misc('2010', '2.8');

    @inargs = (
        { name => 'antialias', type => 'boolean',
          desc => 'The antialias setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "antialias", antialias,
                NULL);
}
CODE
    );
}

sub context_get_feather {
    $blurb = 'Get the feather setting.';

    $help = <<'HELP';
This procedure returns the feather setting.
HELP

    &mitch_pdb_misc('2010', '2.8');

    @outargs = (
        { name => 'feather', type => 'boolean',
          desc => 'The feather setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "feather", &feather,
                NULL);
}
CODE
    );
}

sub context_set_feather {
    $blurb = 'Set the feather setting.';

    $help = <<'HELP';
This procedure modifies the feather setting. If the feather option is
enabled, selections will be blurred before combining. The blur is a
gaussian blur; its radii can be controlled using
picman_context_set_feather_radius().

This setting affects the following procedures:
picman_image_select_color(), picman_image_select_contiguous_color(),
picman_image_select_rectangle(), picman_image_select_round_rectangle(),
picman_image_select_ellipse(), picman_image_select_polygon(),
picman_image_select_item().
HELP

    &mitch_pdb_misc('2010', '2.8');

    @inargs = (
        { name => 'feather', type => 'boolean',
          desc => 'The feather setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "feather", feather,
                NULL);
}
CODE
    );
}

sub context_get_feather_radius {
    $blurb = 'Get the feather radius setting.';

    $help = <<'HELP';
This procedure returns the feather radius setting.
HELP

    &mitch_pdb_misc('2010', '2.8');

    @outargs = (
        { name => 'feather_radius_x', type => '0 <= float <= 1000', void_ret => 1,
          desc => 'The horizontal feather radius' },
        { name => 'feather_radius_y', type => '0 <= float <= 1000',
          desc => 'The vertical feather radius' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "feather-radius-x", &feather_radius_x,
                "feather-radius-y", &feather_radius_y,
                NULL);
}
CODE
    );
}

sub context_set_feather_radius {
    $blurb = 'Set the feather radius setting.';

    $help = <<'HELP';
This procedure modifies the feather radius setting.

This setting affects all procedures that are affected
by picman_context_set_feather().
HELP

    &mitch_pdb_misc('2010', '2.8');

    @inargs = (
        { name => 'feather_radius_x', type => '0 <= float <= 1000',
          desc => 'The horizontal feather radius' },
        { name => 'feather_radius_y', type => '0 <= float <= 1000',
          desc => 'The vertical feather radius' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "feather-radius-x", feather_radius_x,
                "feather-radius-y", feather_radius_y,
                NULL);
}
CODE
    );
}

sub context_get_sample_merged {
    $blurb = 'Get the sample merged setting.';

    $help = <<'HELP';
This procedure returns the sample merged setting.
HELP

    &mitch_pdb_misc('2011', '2.8');

    @outargs = (
        { name => 'sample_merged', type => 'boolean',
          desc => 'The sample merged setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "sample-merged", &sample_merged,
                NULL);
}
CODE
    );
}

sub context_set_sample_merged {
    $blurb = 'Set the sample merged setting.';

    $help = <<'HELP';
This procedure modifies the sample merged setting. If an operation
depends on the colors of the pixels present in a drawable, like when
doing a seed fill, this setting controls whether the pixel data from
the specified drawable is used ('sample-merged' is FALSE), or the
pixel data from the composite image ('sample-merged' is TRUE. This is
equivalent to sampling for colors after merging all visible layers).

This setting affects the following procedures:
picman_image_select_color(), picman_image_select_contiguous_color().
HELP

    &mitch_pdb_misc('2011', '2.8');

    @inargs = (
        { name => 'sample_merged', type => 'boolean',
          desc => 'The sample merged setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "sample-merged", sample_merged,
                NULL);
}
CODE
    );
}

sub context_get_sample_criterion {
    $blurb = 'Get the sample criterion setting.';

    $help = <<'HELP';
This procedure returns the sample criterion setting.
HELP

    &mitch_pdb_misc('2011', '2.8');

    @outargs = (
        { name => 'sample_criterion', type => 'enum PicmanSelectCriterion',
          desc => 'The sample criterion setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "sample-criterion", &sample_criterion,
                NULL);
}
CODE
    );
}

sub context_set_sample_criterion {
    $blurb = 'Set the sample criterion setting.';

    $help = <<'HELP';
This procedure modifies the sample criterion setting. If an operation
depends on the colors of the pixels present in a drawable, like when
doing a seed fill, this setting controls how color similarity is
determined. SELECT_CRITERION_COMPOSITE is the default value.

This setting affects the following procedures:
picman_image_select_color(), picman_image_select_contiguous_color().
HELP

    &mitch_pdb_misc('2011', '2.8');

    @inargs = (
        { name => 'sample_criterion', type => 'enum PicmanSelectCriterion',
          desc => 'The sample criterion setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "sample-criterion", sample_criterion,
                NULL);
}
CODE
    );
}

sub context_get_sample_threshold {
    $blurb = 'Get the sample threshold setting.';

    $help = <<'HELP';
This procedure returns the sample threshold setting.
HELP

    &mitch_pdb_misc('2011', '2.8');

    @outargs = (
        { name => 'sample_threshold', type => '0.0 <= float <= 1.0',
          desc => 'The sample threshold setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "sample-threshold", &sample_threshold,
                NULL);
}
CODE
    );
}

sub context_set_sample_threshold {
    $blurb = 'Set the sample threshold setting.';

    $help = <<'HELP';

This procedure modifies the sample threshold setting. If an operation
depends on the colors of the pixels present in a drawable, like when
doing a seed fill, this setting controls what is "sufficiently close"
to be considered a similar color. If the sample threshold has not been
set explicitly, the default threshold set in picmanrc will be used.

This setting affects the following procedures:
picman_image_select_color(), picman_image_select_contiguous_color().

HELP

    &mitch_pdb_misc('2011', '2.8');

    @inargs = (
        { name => 'sample_threshold', type => '0.0 <= float <= 1.0',
          desc => 'The sample threshold setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "sample-threshold", sample_threshold,
                NULL);
}
CODE
    );
}

sub context_get_sample_threshold_int {
    $blurb = 'Get the sample threshold setting as an integer value.';

    $help = <<'HELP';
This procedure returns the sample threshold setting as an integer
value. See picman_context_get_sample_threshold().
HELP

    &mitch_pdb_misc('2011', '2.8');

    @outargs = (
        { name => 'sample_threshold', type => '0 <= int32 <= 255',
          desc => 'The sample threshold setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  gdouble threshold;

  g_object_get (context,
                "sample-threshold", &threshold,
                NULL);

  sample_threshold = (gint) (threshold * 255.99);
}
CODE
    );
}

sub context_set_sample_threshold_int {
    $blurb = 'Set the sample threshold setting as an integer value.';

    $help = <<'HELP';
This procedure modifies the sample threshold setting as an integer
value. See picman_context_set_sample_threshold().
HELP

    &mitch_pdb_misc('2011', '2.8');

    @inargs = (
        { name => 'sample_threshold', type => '0 <= int32 <= 255',
          desc => 'The sample threshold setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "sample-threshold", (gdouble) sample_threshold / 255.0,
                NULL);
}
CODE
    );
}

sub context_get_sample_transparent {
    $blurb = 'Get the sample transparent setting.';

    $help = <<'HELP';
This procedure returns the sample transparent setting.
HELP

    &mitch_pdb_misc('2011', '2.8');

    @outargs = (
        { name => 'sample_transparent', type => 'boolean',
          desc => 'The sample transparent setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "sample-transparent", &sample_transparent,
                NULL);
}
CODE
    );
}

sub context_set_sample_transparent {
    $blurb = 'Set the sample transparent setting.';

    $help = <<'HELP';

This procedure modifies the sample transparent setting. If an
operation depends on the colors of the pixels present in a drawable,
like when doing a seed fill, this setting controls whether
transparency is considered to be a unique selectable color. When this
setting is TRUE, transparent areas can be selected or filled.

This setting affects the following procedures:
picman_image_select_color(), picman_image_select_contiguous_color().
HELP

    &mitch_pdb_misc('2011', '2.8');

    @inargs = (
        { name => 'sample_transparent', type => 'boolean',
          desc => 'The sample transparent setting' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "sample-transparent", sample_transparent,
                NULL);
}
CODE
    );
}

sub context_get_interpolation {
    $blurb = 'Get the interpolation type.';

    $help = <<'HELP';
This procedure returns the interpolation setting. The return value
is an integer which corresponds to the values listed in the argument
description. If the interpolation has not been set explicitly by
picman_context_set_interpolation(), the default interpolation set in
picmanrc will be used.
HELP

    &mitch_pdb_misc('2010', '2.8');

    @outargs = (
        { name => 'interpolation', type => 'enum PicmanInterpolationType',
          desc => 'The interpolation type' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "interpolation", &interpolation,
                NULL);
}
CODE
    );
}

sub context_set_interpolation {
    $blurb = 'Set the interpolation type.';

    $help = <<'HELP';
This procedure modifies the interpolation setting.

This setting affects affects the following procedures:
picman_item_transform_flip(), picman_item_transform_perspective(),
picman_item_transform_rotate(), picman_item_transform_scale(),
picman_item_transform_shear(), picman_item_transform_2d(),
picman_item_transform_matrix(), picman_image_scale(), picman_layer_scale().
HELP

    &mitch_pdb_misc('2010', '2.8');

    @inargs = (
        { name => 'interpolation', type => 'enum PicmanInterpolationType',
          desc => 'The interpolation type' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "interpolation", interpolation,
                NULL);
}
CODE
    );
}

sub context_get_transform_direction {
    $blurb = 'Get the transform direction.';

    $help = <<'HELP';
This procedure returns the transform direction. The return value
is an integer which corresponds to the values listed in the argument
description.
HELP

    &mitch_pdb_misc('2010', '2.8');

    @outargs = (
        { name => 'transform_direction', type => 'enum PicmanTransformDirection',
          desc => 'The transform direction' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "transform-direction", &transform_direction,
                NULL);
}
CODE
    );
}

sub context_set_transform_direction {
    $blurb = 'Set the transform direction.';

    $help = <<'HELP';
This procedure modifies the transform direction setting.

This setting affects affects the following procedures:
picman_item_transform_flip(), picman_item_transform_perspective(),
picman_item_transform_rotate(), picman_item_transform_scale(),
picman_item_transform_shear(), picman_item_transform_2d(),
picman_item_transform_matrix().
HELP

    &mitch_pdb_misc('2010', '2.8');

    @inargs = (
        { name => 'transform_direction', type => 'enum PicmanTransformDirection',
          desc => 'The transform direction' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "transform-direction", transform_direction,
                NULL);
}
CODE
    );
}

sub context_get_transform_resize {
    $blurb = 'Get the transform resize type.';

    $help = <<'HELP';
This procedure returns the transform resize setting. The return value
is an integer which corresponds to the values listed in the argument
description.
HELP

    &mitch_pdb_misc('2010', '2.8');

    @outargs = (
        { name => 'transform_resize', type => 'enum PicmanTransformResize',
          desc => 'The transform resize type' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "transform-resize", &transform_resize,
                NULL);
}
CODE
    );
}

sub context_set_transform_resize {
    $blurb = 'Set the transform resize type.';

    $help = <<'HELP';
This procedure modifies the transform resize setting. When transforming
pixels, if the result of a transform operation  has a different size
than the original area, this setting determines how the resulting area
is sized.

This setting affects affects the following procedures:
picman_item_transform_flip(), picman_item_transform_flip_simple(),
picman_item_transform_perspective(), picman_item_transform_rotate(),
picman_item_transform_rotate_simple(), picman_item_transform_scale(),
picman_item_transform_shear(), picman_item_transform_2d(),
picman_item_transform_matrix().
HELP

    &mitch_pdb_misc('2010', '2.8');

    @inargs = (
        { name => 'transform_resize', type => 'enum PicmanTransformResize',
          desc => 'The transform resize type' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "transform-resize", transform_resize,
                NULL);
}
CODE
    );
}

sub context_get_transform_recursion {
    $blurb = 'Get the transform supersampling recursion.';

    $help = <<'HELP';
This procedure returns the transform supersampling recursion level.
HELP

    &mitch_pdb_misc('2010', '2.8');

    @outargs = (
        { name => 'transform_recursion', type => '1 <= int32',
          desc => 'The transform recursion level' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_get (context,
                "transform-recursion", &transform_recursion,
                NULL);
}
CODE
    );
}

sub context_set_transform_recursion {
    $blurb = 'Set the transform supersampling recursion.';

    $help = <<'HELP';
This procedure modifies the transform supersampling recursion level
setting. Whether or not a transformation does supersampling is
determined by the interplolation type. The recursion level defaults
to 3, which is a nice default value.

This setting affects affects the following procedures:
picman_item_transform_flip(), picman_item_transform_perspective(),
picman_item_transform_rotate(), picman_item_transform_scale(),
picman_item_transform_shear(), picman_item_transform_2d(),
picman_item_transform_matrix().
HELP

    &mitch_pdb_misc('2010', '2.8');

    @inargs = (
        { name => 'transform_recursion', type => '1 <= int32',
          desc => 'The transform recursion level' }
    );

    %invoke = (
	code => <<'CODE'
{
  g_object_set (context,
                "transform-recursion", transform_recursion,
                NULL);
}
CODE
    );
}

sub context_get_ink_size {
    $blurb = 'Get ink blob size in pixels.';
    $help = 'Get the ink blob size in pixels for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "size", type => "0 <= float <= 200",
          desc => "ink blob size in pixels" }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_get (options,
                  "size", &size,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_size {
    $blurb = 'Set ink blob size in pixels.';
    $help = 'Set the ink blob size in pixels for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "size", type => "0 <= float <= 200",
          desc => "ink blob size in pixels" }
    );

    %invoke = (
        code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "size", size,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_get_ink_angle {
    $blurb = 'Get ink angle in degrees.';
    $help = 'Get the ink angle in degrees for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "angle", type => "-90 <= float <= 90",
          desc => "ink angle in degrees" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_get (options,
                  "tilt-angle", &angle,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_angle {
    $blurb = 'Set ink angle in degrees.';
    $help = 'Set the ink angle in degrees for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "angle", type => "-90 <= float <= 90",
          desc => "ink angle in degrees" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "tilt-angle", angle,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_get_ink_size_sensitivity {
    $blurb = 'Get ink size sensitivity.';
    $help = 'Get the ink size sensitivity for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "size", type => "0 <= float <= 1",
          desc => "ink size sensitivity" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_get (options,
                  "size-sensitivity", &size,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_size_sensitivity {
    $blurb = 'Set ink size sensitivity.';
    $help = 'Set the ink size sensitivity for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "size", type => "0 <= float <= 1",
          desc => "ink size sensitivity" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "size-sensitivity", size,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_get_ink_tilt_sensitivity {
    $blurb = 'Get ink tilt sensitivity.';
    $help = 'Get the ink tilt sensitivity for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "tilt", type => "0 <= float <= 1",
          desc => "ink tilt sensitivity" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_get (options,
                  "tilt-sensitivity", &tilt,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_tilt_sensitivity {
    $blurb = 'Set ink tilt sensitivity.';
    $help = 'Set the ink tilt sensitivity for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "tilt", type => "0 <= float <= 1",
          desc => "ink tilt sensitivity" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "tilt-sensitivity", tilt,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_get_ink_speed_sensitivity {
    $blurb = 'Get ink speed sensitivity.';
    $help = 'Get the ink speed sensitivity for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "speed", type => "0 <= float <= 1",
          desc => "ink speed sensitivity" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_get (options,
                  "vel-sensitivity", &speed,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_speed_sensitivity {
    $blurb = 'Set ink speed sensitivity.';
    $help = 'Set the ink speed sensitivity for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "speed", type => "0 <= float <= 1",
          desc => "ink speed sensitivity" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "vel-sensitivity", speed,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_get_ink_blob_type {
    $blurb = 'Get ink blob type.';
    $help = 'Get the ink blob type for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "type", type => "enum PicmanInkBlobType",
          desc => "Ink blob type" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_get (options,
                  "blob-type", &type,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_blob_type {
    $blurb = 'Set ink blob type.';
    $help = 'Set the ink blob type for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "type", type => "enum PicmanInkBlobType",
          desc => "Ink blob type" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "blob-type", type,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_get_ink_blob_aspect_ratio {
    $blurb = 'Get ink blob aspect ratio.';
    $help = 'Get the ink blob aspect ratio for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "aspect", type => "1 <= float <= 10",
          desc => "ink blob aspect ratio" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_get (options,
                  "blob-aspect", &aspect,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_blob_aspect_ratio {
    $blurb = 'Set ink blob aspect ratio.';
    $help = 'Set the ink blob aspect ratio for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "aspect", type => "1 <= float <= 10",
          desc => "ink blob aspect ratio" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "blob-aspect", aspect,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}


sub context_get_ink_blob_angle {
    $blurb = 'Get ink blob angle in degrees.';
    $help = 'Get the ink blob angle in degrees for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @outargs = (
        { name => "angle", type => "-180 <= float <= 180",
          desc => "ink blob angle in degrees" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    {
      g_object_get (options,
		    "blob-angle", &angle,
		    NULL);
      angle *= (180-0 / G_PI);
    }
  else
    success = FALSE;
}
CODE
    );
}


sub context_set_ink_blob_angle {
    $blurb = 'Set ink blob angle in degrees.';
    $help = 'Set the ink blob angle in degrees for ink tool.';

    &ejs_pdb_misc('2012', '2.8');

    @inargs = (
        { name => "angle", type => "-180 <= float <= 180",
          desc => "ink blob angle in degrees" }
    );

    %invoke = (
    code => <<'CODE'
{
  PicmanPaintOptions *options =
    picman_pdb_context_get_paint_options (PICMAN_PDB_CONTEXT (context),
                                        "picman-ink");

  if (options)
    g_object_set (options,
                  "blob-angle", (gdouble) angle * G_PI / 180.0,
                  NULL);
  else
    success = FALSE;
}
CODE
    );
}

@headers = qw("core/picman.h"
              "core/picmanbrush.h"
              "core/picmancontainer.h"
              "core/picmandatafactory.h"
              "core/picmantempbuf.h"
              "libpicmanconfig/picmanconfig.h"
              "plug-in/picmanplugin.h"
              "plug-in/picmanplugin-context.h"
              "plug-in/picmanpluginmanager.h"
              "picmanpdb-utils.h"
              "picmanpdbcontext.h");

@procs = qw(context_push context_pop context_set_defaults
            context_list_paint_methods
            context_get_paint_method context_set_paint_method
            context_get_foreground context_set_foreground
            context_get_background context_set_background
            context_set_default_colors
            context_swap_colors
            context_get_opacity context_set_opacity
            context_get_paint_mode context_set_paint_mode
            context_get_brush context_set_brush
            context_get_brush_size
            context_set_brush_size context_set_brush_default_size
            context_get_brush_aspect_ratio context_set_brush_aspect_ratio
            context_get_brush_angle context_set_brush_angle
            context_get_dynamics context_set_dynamics
            context_get_pattern context_set_pattern
            context_get_gradient context_set_gradient
            context_get_palette context_set_palette
            context_get_font context_set_font
            context_get_antialias context_set_antialias
            context_get_feather context_set_feather
            context_get_feather_radius context_set_feather_radius
            context_get_sample_merged context_set_sample_merged
            context_get_sample_criterion context_set_sample_criterion
            context_get_sample_threshold context_set_sample_threshold
            context_get_sample_threshold_int context_set_sample_threshold_int
            context_get_sample_transparent context_set_sample_transparent
            context_get_interpolation context_set_interpolation
            context_get_transform_direction context_set_transform_direction
            context_get_transform_resize context_set_transform_resize
            context_get_transform_recursion context_set_transform_recursion
            context_get_ink_size context_set_ink_size
            context_get_ink_angle context_set_ink_angle
            context_get_ink_size_sensitivity context_set_ink_size_sensitivity
            context_get_ink_tilt_sensitivity context_set_ink_tilt_sensitivity
            context_get_ink_speed_sensitivity context_set_ink_speed_sensitivity
            context_get_ink_blob_type context_set_ink_blob_type
            context_get_ink_blob_aspect_ratio context_set_ink_blob_aspect_ratio
            context_get_ink_blob_angle context_set_ink_blob_angle);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Context';
$doc_title = 'picmancontext';
$doc_short_desc = "Functions to manipulate a plug-in's context.";
$doc_long_desc = "Functions to manipulate a plug-in's context.";

1;
