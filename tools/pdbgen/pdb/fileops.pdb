# PICMAN - The GNU Image Manipulation Program
# Copyright (C) 1995, 1996, 1997 Spencer Kimball and Peter Mattis
# Copyright (C) 1997 Josh MacDonald

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@picman.org>

sub file_load {
    $blurb = 'Loads an image file by invoking the right load handler.';

    $help = <<'HELP';
This procedure invokes the correct file load handler using magic if possible,
and falling back on the file's extension and/or prefix if not. The name of
the file to load is typically a full pathname, and the name entered is what
the user actually typed before prepending a directory path. The reason for
this is that if the user types http://www.xcf/~picman/ he wants to fetch a URL,
and the full pathname will not look like a URL."
HELP

    &josh_pdb_misc('1997');

    @inargs = (
        { name => 'run_mode',
          type => 'enum PicmanRunMode (no PICMAN_RUN_WITH_LAST_VALS)',
          desc => 'The run mode' },
        { name => 'filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name of the file to load' },
        { name => 'raw_filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name as entered by the user' }
    );

    @outargs = (
        { name => 'image', type => 'image',
          desc => 'The output image' }
    );

    %invoke = (
        no_marshalling => 1,
        code => <<'CODE'
{
  PicmanValueArray      *new_args;
  PicmanValueArray      *return_vals;
  PicmanPlugInProcedure *file_proc;
  PicmanProcedure       *proc;
  gchar               *uri;
  gint                 i;

  uri = file_utils_filename_to_uri (picman,
                                    g_value_get_string (picman_value_array_index (args, 1)),
                                    error);

  if (! uri)
    return picman_procedure_get_return_values (procedure, FALSE,
                                             error ? *error : NULL);

  file_proc =
    file_procedure_find (picman->plug_in_manager->load_procs, uri, error);

  g_free (uri);

  if (! file_proc)
    return picman_procedure_get_return_values (procedure, FALSE,
                                             error ? *error : NULL);

  proc = PICMAN_PROCEDURE (file_proc);

  new_args = picman_procedure_get_arguments (proc);

  for (i = 0; i < 3; i++)
    g_value_transform (picman_value_array_index (args, i),
                       picman_value_array_index (new_args, i));

  for (i = 3; i < proc->num_args; i++)
    if (G_IS_PARAM_SPEC_STRING (proc->args[i]))
      g_value_set_static_string (picman_value_array_index (new_args, i), "");

  return_vals =
    picman_pdb_execute_procedure_by_name_args (picman->pdb,
                                             context, progress, error,
                                             picman_object_get_name (proc),
                                             new_args);

  picman_value_array_unref (new_args);

  if (g_value_get_enum (picman_value_array_index (return_vals, 0)) ==
      PICMAN_PDB_SUCCESS)
    {
      if (picman_value_array_length (return_vals) > 1 &&
          PICMAN_VALUE_HOLDS_IMAGE_ID (picman_value_array_index (return_vals, 1)))
        {
          PicmanImage *image =
            picman_value_get_image (picman_value_array_index (return_vals, 1),
                                  picman);
          picman_image_set_load_proc (image, file_proc);
        }
    }

  return return_vals;
}
CODE
    );
}

sub file_load_layer {
    $blurb = 'Loads an image file as a layer for an existing image.';

    $help = <<'HELP';
This procedure behaves like the file-load procedure but opens the specified
image as a layer for an existing image. The returned layer needs to be
added to the existing image with picman_image_insert_layer().
HELP

    &neo_pdb_misc('2005', '2.4');

    @inargs = (
        { name => 'run_mode',
          type => 'enum PicmanRunMode (no PICMAN_RUN_WITH_LAST_VALS)',
          desc => 'The run mode' },
        { name => 'image', type => 'image',
          desc => 'Destination image' },
        { name => 'filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name of the file to load' }
    );

    @outargs = (
        { name => 'layer', type => 'layer',
          desc => 'The layer created when loading the image file' }
    );

    %invoke = (
        code => <<'CODE'
{
  gchar *uri = file_utils_filename_to_uri (picman, filename, error);

  if (uri)
    {
      GList             *layers;
      PicmanPDBStatusType  status;

      layers = file_open_layers (picman, context, progress,
                                 image, FALSE,
                                 uri, run_mode, NULL, &status, error);

      if (layers)
        {
          layer = layers->data;
          g_list_free (layers);
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub file_load_layers {
    $blurb = 'Loads an image file as layers for an existing image.';

    $help = <<'HELP';
This procedure behaves like the file-load procedure but opens the specified
image as layers for an existing image. The returned layers needs to be
added to the existing image with picman_image_insert_layer().
HELP

    &mitch_pdb_misc('2006', '2.4');

    @inargs = (
        { name => 'run_mode',
          type => 'enum PicmanRunMode (no PICMAN_RUN_WITH_LAST_VALS)',
          desc => 'The run mode' },
        { name => 'image', type => 'image',
          desc => 'Destination image' },
        { name => 'filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name of the file to load' }
    );

    @outargs = (
        { name => 'layer_ids', type => 'int32array',
          desc => 'The list of loaded layers',
          array => { name => 'num_layers',
                     desc => 'The number of loaded layers' } }
    );

    %invoke = (
        code => <<'CODE'
{
  gchar *uri = file_utils_filename_to_uri (picman, filename, error);

  if (uri)
    {
      GList             *layers;
      PicmanPDBStatusType  status;

      layers = file_open_layers (picman, context, progress,
                                 image, FALSE,
                                 uri, run_mode, NULL, &status, error);

      if (layers)
        {
          GList *list;
          gint i;

          num_layers = g_list_length (layers);

          layer_ids = g_new (gint32, num_layers);

          for (i = 0, list = layers;
               i < num_layers;
               i++, list = g_list_next (list))
            layer_ids[i] = picman_item_get_ID (PICMAN_ITEM (list->data));

          g_list_free (layers);
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub file_save {
    $blurb = 'Saves a file by extension.';

    $help = <<'HELP';
This procedure invokes the correct file save handler according to the file's
extension and/or prefix. The name of the file to save is typically a full
pathname, and the name entered is what the user actually typed before
prepending a directory path. The reason for this is that if the user types
http://www.xcf/~picman/ she wants to fetch a URL, and the full pathname will not
look like a URL.
HELP

    &josh_pdb_misc('1997');

    @inargs = (
        { name => 'run_mode', type => 'enum PicmanRunMode',
          desc => 'The run mode' },
        { name => 'image', type => 'image',
          desc => 'Input image' },
        { name => 'drawable', type => 'drawable',
          desc => 'Drawable to save' },
        { name => 'filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name of the file to save the image in' },
        { name => 'raw_filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name as entered by the user' }
    );

    %invoke = (
        headers => [ qw(<string.h>) ],
        no_marshalling => 1,
        code => <<'CODE'
{
  PicmanValueArray      *new_args;
  PicmanValueArray      *return_vals;
  PicmanPlugInProcedure *file_proc;
  PicmanProcedure       *proc;
  gchar               *uri;
  gint                 i;

  uri = file_utils_filename_to_uri (picman,
                                    g_value_get_string (picman_value_array_index (args, 3)),
                                    error);

  if (! uri)
    return picman_procedure_get_return_values (procedure, FALSE,
                                             error ? *error : NULL);

  file_proc =
    file_procedure_find (picman->plug_in_manager->save_procs, uri, NULL);

  if (! file_proc)
    file_proc = file_procedure_find (picman->plug_in_manager->export_procs, uri, error);

  g_free (uri);

  if (! file_proc)
    return picman_procedure_get_return_values (procedure, FALSE,
                                             error ? *error : NULL);

  proc = PICMAN_PROCEDURE (file_proc);

  new_args = picman_procedure_get_arguments (proc);

  for (i = 0; i < 5; i++)
    g_value_transform (picman_value_array_index (args, i),
                       picman_value_array_index (new_args, i));

  for (i = 5; i < proc->num_args; i++)
    if (G_IS_PARAM_SPEC_STRING (proc->args[i]))
      g_value_set_static_string (picman_value_array_index (new_args, i), "");

  return_vals =
    picman_pdb_execute_procedure_by_name_args (picman->pdb,
                                             context, progress, error,
                                             picman_object_get_name (proc),
                                             new_args);

  picman_value_array_unref (new_args);

  return return_vals;
}
CODE
    );
}

sub file_load_thumbnail {
    $blurb = 'Loads the thumbnail for a file.';

    $help = <<'HELP';
This procedure tries to load a thumbnail that belongs to the file with
the given filename. This name is a full pathname. The returned data is 
an array of colordepth 3 (RGB), regardless of the image type. Width and 
height of the thumbnail are also returned. Don't use this function if 
you need a thumbnail of an already opened image, use picman_image_thumbnail()
instead.
HELP

    $author = $copyright = 'Adam D. Moss, Sven Neumann';
    $date = '1999-2003';

    @inargs = (
        { name => 'filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name of the file that owns the thumbnail to load' }
    );

    @outargs = (
        { name => 'width', type => 'int32',
          desc => 'The width of the thumbnail' },
        { name => 'height', type => 'int32',
          desc => 'The height of the thumbnail' },
        { name => 'thumb_data', type => 'int8array',
          desc => 'The thumbnail data',
          array =>  { name => 'thumb_data_count',
                      desc => 'The number of bytes in thumbnail data' } }
    );

    %invoke = (
        code => <<'CODE'
{
  GdkPixbuf *pixbuf = file_utils_load_thumbnail (filename);

  if (pixbuf)
    {
      width            = gdk_pixbuf_get_width (pixbuf);
      height           = gdk_pixbuf_get_height (pixbuf);
      thumb_data_count = 3 * width * height;
      thumb_data       = g_memdup (gdk_pixbuf_get_pixels (pixbuf),
                                   thumb_data_count);

      g_object_unref (pixbuf);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub file_save_thumbnail {
    $blurb = 'Saves a thumbnail for the given image';

    $help = <<'HELP';
This procedure saves a thumbnail for the given image according to the
Free Desktop Thumbnail Managing Standard. The thumbnail is saved so
that it belongs to the file with the given filename. This means you
have to save the image under this name first, otherwise this procedure
will fail.  This procedure may become useful if you want to
explicitly save a thumbnail with a file.
HELP

    &josh_pdb_misc('1997');

    @inargs = (
        { name => 'image', type => 'image',
          desc => 'The image' },
        { name => 'filename', type => 'string', allow_non_utf8 => 1,
          desc => 'The name of the file the thumbnail belongs to' },
    );

    %invoke = (
        code => <<'CODE'
{
  success = file_utils_save_thumbnail (image, filename);
}
CODE
    );
}

sub temp_name {
    $blurb = 'Generates a unique filename.';

    $help = <<'HELP';
Generates a unique filename using the temp path supplied in the user's picmanrc.
HELP

    &josh_pdb_misc('1997');

    @inargs = (
        { name => 'extension', type => 'string',
	  allow_non_utf8 => 1, null_ok => 1,
          desc => 'The extension the file will have' }
    );

    @outargs = (
        { name => 'name', type => 'string',
          desc => 'The new temp filename' }
    );

    %invoke = (
        code => <<'CODE'
{
  name = picman_get_temp_filename (picman, extension);
}
CODE
    );
}

sub register_magic_load_handler {
    $blurb = 'Registers a file load handler procedure.';

    $help = <<'HELP';
Registers a procedural database procedure to be called to load files of a 
particular file format using magic file information.
HELP

    &std_pdb_misc;

    @inargs = (
        { name => 'procedure_name', type => 'string', non_empty => 1,
          desc => 'The name of the procedure to be used for loading' },
        { name => 'extensions', type => 'string', no_validate => 1,
          desc => 'comma separated list of extensions this handler
                   can load (i.e. "jpg,jpeg")' },
        { name => 'prefixes', type => 'string', no_validate => 1,
          desc => 'comma separated list of prefixes this handler
                   can load (i.e. "http:,ftp:")' },
        { name => 'magics', type => 'string', no_validate => 1,
          desc => 'comma separated list of magic file information
                   this handler can load (i.e. "0,string,GIF")' }
    );

    %invoke = (
        code => <<'CODE'
{
  gchar *canonical = picman_canonicalize_identifier (procedure_name);

  success = picman_plug_in_manager_register_load_handler (picman->plug_in_manager,
                                                        canonical,
                                                        extensions, prefixes, magics);

  g_free (canonical);
}
CODE
    );
}

sub register_load_handler {
    $blurb = 'Registers a file load handler procedure.';

    $help = <<'HELP';
Registers a procedural database procedure to be called to load files of a
particular file format.
HELP

    &std_pdb_misc;

    @inargs = (
        { name => 'procedure_name', type => 'string', non_empty => 1,
          desc => 'The name of the procedure to be used for loading' },
        { name => 'extensions', type => 'string', no_validate => 1,
          desc => 'comma separated list of extensions this handler
                   can load (i.e. "jpg,jpeg")' },
        { name => 'prefixes', type => 'string', no_validate => 1,
          desc => 'comma separated list of prefixes this handler
                   can load (i.e. "http:,ftp:")' }
    );


    %invoke = (
        code => <<'CODE'
{
  gchar *canonical = picman_canonicalize_identifier (procedure_name);

  success = picman_plug_in_manager_register_load_handler (picman->plug_in_manager,
                                                        canonical,
                                                        extensions, prefixes, NULL);

  g_free (canonical);
}
CODE
    );
}

sub register_save_handler {
    $blurb = 'Registers a file save handler procedure.';

    $help = <<'HELP';
Registers a procedural database procedure to be called to save files in a
particular file format.
HELP

    &std_pdb_misc;

    @inargs = (
        { name => 'procedure_name', type => 'string', non_empty => 1,
          desc => 'The name of the procedure to be used for saving' },
        { name => 'extensions', type => 'string', no_validate => 1,
          desc => 'comma separated list of extensions this handler
                   can save (i.e. "jpg,jpeg")' },
        { name => 'prefixes', type => 'string', no_validate => 1,
          desc => 'comma separated list of prefixes this handler
                   can save (i.e. "http:,ftp:")' }
    );

    %invoke = (
        code => <<'CODE'
{
  gchar *canonical = picman_canonicalize_identifier (procedure_name);

  success = picman_plug_in_manager_register_save_handler (picman->plug_in_manager,
                                                        canonical,
                                                        extensions, prefixes);

  g_free (canonical);
}
CODE
    );
}

sub register_file_handler_uri {
    $blurb = 'Registers a file handler procedure as capable of handling URIs.';

    $help = <<'HELP';
Registers a file handler procedure as capable of handling URIs. This
allows PICMAN to call the procecure directly for all kinds of URIs, and
the 'filename' traditionally passed to file procesures turns into an
URI.
HELP

    &mitch_pdb_misc('2012', '2.10');

    @inargs = (
        { name => 'procedure_name', type => 'string', non_empty => 1,
          desc => "The name of the procedure to enable URIs for." }
    );

    %invoke = (
        code => <<'CODE'
{
  gchar *canonical = picman_canonicalize_identifier (procedure_name);

  success = picman_plug_in_manager_register_handles_uri (picman->plug_in_manager,
                                                       canonical);

  g_free (canonical);
}
CODE
    );
}

sub register_file_handler_mime {
    $blurb = 'Associates a MIME type with a file handler procedure.';

    $help = <<'HELP';
Registers a MIME type for a file handler procedure. This allows PICMAN
to determine the MIME type of the file opened or saved using this
procedure.
HELP

    &neo_pdb_misc('2004', '2.2');

    @inargs = (
        { name => 'procedure_name', type => 'string', non_empty => 1,
          desc => "The name of the procedure to associate a MIME type with." },
        { name => 'mime_type', type => 'string',
          desc => "A single MIME type, like for example \"image/jpeg\"."     }
    );

    %invoke = (
        code => <<'CODE'
{
  gchar *canonical = picman_canonicalize_identifier (procedure_name);

  success = picman_plug_in_manager_register_mime_type (picman->plug_in_manager,
                                                     canonical, mime_type);

  g_free (canonical);
}
CODE
    );
}

sub register_thumbnail_loader {
    $blurb = 'Associates a thumbnail loader with a file load procedure.';

    $help = <<'HELP';
Some file formats allow for embedded thumbnails, other file formats
contain a scalable image or provide the image data in different
resolutions. A file plug-in for such a format may register a special
procedure that allows PICMAN to load a thumbnail preview of the
image. This procedure is then associated with the standard load
procedure using this function.
HELP

    &neo_pdb_misc('2004', '2.2');

    @inargs = (
        { name => 'load_proc', type => 'string', non_empty => 1,
          desc => "The name of the procedure the thumbnail loader with." },
        { name => 'thumb_proc', type => 'string', non_empty => 1,
          desc => "The name of the thumbnail load procedure." }
    );
    %invoke = (
        code => <<'CODE'
{
  gchar *canonical   = picman_canonicalize_identifier (load_proc);
  gchar *canon_thumb = picman_canonicalize_identifier (thumb_proc);

  success = picman_plug_in_manager_register_thumb_loader (picman->plug_in_manager,
                                                        canonical, canon_thumb);

  g_free (canonical);
  g_free (canon_thumb);
}
CODE
    );
}


@headers = qw("libpicmanbase/picmanbase.h"
              "libpicmanconfig/picmanconfig.h"
              "core/picman.h"
              "core/picman-utils.h"
              "plug-in/picmanpluginmanager.h"
              "plug-in/picmanpluginmanager-file.h"
              "file/file-open.h"
              "file/file-save.h"
	      "file/file-procedure.h"
              "file/file-utils.h");

@procs = qw(file_load
            file_load_layer
            file_load_layers
            file_save
            file_load_thumbnail
            file_save_thumbnail
            temp_name
            register_magic_load_handler
            register_load_handler
            register_save_handler
            register_file_handler_mime
            register_file_handler_uri
            register_thumbnail_loader);

%exports = (app => [@procs], lib => [@procs[0..3,5..12]]);

$desc = 'File Operations';
$doc_title = 'picmanfileops';
$doc_short_desc = 'File operations (load, save, etc.)';
$doc_long_desc = 'File operations (load, save, etc.)';

1;
