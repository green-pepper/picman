# PICMAN - The GNU Image Manipulation Program
# Copyright (C) 1999-2003 Manish Singh <yosh@picman.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUTFILE ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# autogenerated by enumgen.pl

package Picman::CodeGen::enums;

%enums = (
    PicmanAddMaskType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_ADD_WHITE_MASK PICMAN_ADD_BLACK_MASK
			  PICMAN_ADD_ALPHA_MASK PICMAN_ADD_ALPHA_TRANSFER_MASK
			  PICMAN_ADD_SELECTION_MASK PICMAN_ADD_COPY_MASK
			  PICMAN_ADD_CHANNEL_MASK) ],
	  mapping => { PICMAN_ADD_WHITE_MASK => '0',
		       PICMAN_ADD_BLACK_MASK => '1',
		       PICMAN_ADD_ALPHA_MASK => '2',
		       PICMAN_ADD_ALPHA_TRANSFER_MASK => '3',
		       PICMAN_ADD_SELECTION_MASK => '4',
		       PICMAN_ADD_COPY_MASK => '5',
		       PICMAN_ADD_CHANNEL_MASK => '6' }
	},
    PicmanBlendMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_FG_BG_RGB_MODE PICMAN_FG_BG_HSV_MODE
			  PICMAN_FG_TRANSPARENT_MODE PICMAN_CUSTOM_MODE) ],
	  mapping => { PICMAN_FG_BG_RGB_MODE => '0',
		       PICMAN_FG_BG_HSV_MODE => '1',
		       PICMAN_FG_TRANSPARENT_MODE => '2',
		       PICMAN_CUSTOM_MODE => '3' }
	},
    PicmanBucketFillMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_FG_BUCKET_FILL PICMAN_BG_BUCKET_FILL
			  PICMAN_PATTERN_BUCKET_FILL) ],
	  mapping => { PICMAN_FG_BUCKET_FILL => '0',
		       PICMAN_BG_BUCKET_FILL => '1',
		       PICMAN_PATTERN_BUCKET_FILL => '2' }
	},
    PicmanChannelOps =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_CHANNEL_OP_ADD PICMAN_CHANNEL_OP_SUBTRACT
			  PICMAN_CHANNEL_OP_REPLACE PICMAN_CHANNEL_OP_INTERSECT) ],
	  mapping => { PICMAN_CHANNEL_OP_ADD => '0',
		       PICMAN_CHANNEL_OP_SUBTRACT => '1',
		       PICMAN_CHANNEL_OP_REPLACE => '2',
		       PICMAN_CHANNEL_OP_INTERSECT => '3' }
	},
    PicmanChannelType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_RED_CHANNEL PICMAN_GREEN_CHANNEL
			  PICMAN_BLUE_CHANNEL PICMAN_GRAY_CHANNEL
			  PICMAN_INDEXED_CHANNEL PICMAN_ALPHA_CHANNEL) ],
	  mapping => { PICMAN_RED_CHANNEL => '0',
		       PICMAN_GREEN_CHANNEL => '1',
		       PICMAN_BLUE_CHANNEL => '2',
		       PICMAN_GRAY_CHANNEL => '3',
		       PICMAN_INDEXED_CHANNEL => '4',
		       PICMAN_ALPHA_CHANNEL => '5' }
	},
    PicmanCloneType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_IMAGE_CLONE PICMAN_PATTERN_CLONE) ],
	  mapping => { PICMAN_IMAGE_CLONE => '0',
		       PICMAN_PATTERN_CLONE => '1' }
	},
    PicmanDesaturateMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_DESATURATE_LIGHTNESS
			  PICMAN_DESATURATE_LUMINOSITY PICMAN_DESATURATE_AVERAGE) ],
	  mapping => { PICMAN_DESATURATE_LIGHTNESS => '0',
		       PICMAN_DESATURATE_LUMINOSITY => '1',
		       PICMAN_DESATURATE_AVERAGE => '2' }
	},
    PicmanDodgeBurnType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_DODGE PICMAN_BURN) ],
	  mapping => { PICMAN_DODGE => '0',
		       PICMAN_BURN => '1' }
	},
    PicmanForegroundExtractMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_FOREGROUND_EXTRACT_SIOX) ],
	  mapping => { PICMAN_FOREGROUND_EXTRACT_SIOX => '0' }
	},
    PicmanGradientType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_GRADIENT_LINEAR PICMAN_GRADIENT_BILINEAR
			  PICMAN_GRADIENT_RADIAL PICMAN_GRADIENT_SQUARE
			  PICMAN_GRADIENT_CONICAL_SYMMETRIC
			  PICMAN_GRADIENT_CONICAL_ASYMMETRIC
			  PICMAN_GRADIENT_SHAPEBURST_ANGULAR
			  PICMAN_GRADIENT_SHAPEBURST_SPHERICAL
			  PICMAN_GRADIENT_SHAPEBURST_DIMPLED
			  PICMAN_GRADIENT_SPIRAL_CLOCKWISE
			  PICMAN_GRADIENT_SPIRAL_ANTICLOCKWISE) ],
	  mapping => { PICMAN_GRADIENT_LINEAR => '0',
		       PICMAN_GRADIENT_BILINEAR => '1',
		       PICMAN_GRADIENT_RADIAL => '2',
		       PICMAN_GRADIENT_SQUARE => '3',
		       PICMAN_GRADIENT_CONICAL_SYMMETRIC => '4',
		       PICMAN_GRADIENT_CONICAL_ASYMMETRIC => '5',
		       PICMAN_GRADIENT_SHAPEBURST_ANGULAR => '6',
		       PICMAN_GRADIENT_SHAPEBURST_SPHERICAL => '7',
		       PICMAN_GRADIENT_SHAPEBURST_DIMPLED => '8',
		       PICMAN_GRADIENT_SPIRAL_CLOCKWISE => '9',
		       PICMAN_GRADIENT_SPIRAL_ANTICLOCKWISE => '10' }
	},
    PicmanGridStyle =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_GRID_DOTS PICMAN_GRID_INTERSECTIONS
			  PICMAN_GRID_ON_OFF_DASH PICMAN_GRID_DOUBLE_DASH
			  PICMAN_GRID_SOLID) ],
	  mapping => { PICMAN_GRID_DOTS => '0',
		       PICMAN_GRID_INTERSECTIONS => '1',
		       PICMAN_GRID_ON_OFF_DASH => '2',
		       PICMAN_GRID_DOUBLE_DASH => '3',
		       PICMAN_GRID_SOLID => '4' }
	},
    PicmanIconType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_ICON_TYPE_STOCK_ID
			  PICMAN_ICON_TYPE_INLINE_PIXBUF
			  PICMAN_ICON_TYPE_IMAGE_FILE) ],
	  mapping => { PICMAN_ICON_TYPE_STOCK_ID => '0',
		       PICMAN_ICON_TYPE_INLINE_PIXBUF => '1',
		       PICMAN_ICON_TYPE_IMAGE_FILE => '2' }
	},
    PicmanImageBaseType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_RGB PICMAN_GRAY PICMAN_INDEXED) ],
	  mapping => { PICMAN_RGB => '0',
		       PICMAN_GRAY => '1',
		       PICMAN_INDEXED => '2' }
	},
    PicmanImageType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_RGB_IMAGE PICMAN_RGBA_IMAGE PICMAN_GRAY_IMAGE
			  PICMAN_GRAYA_IMAGE PICMAN_INDEXED_IMAGE
			  PICMAN_INDEXEDA_IMAGE) ],
	  mapping => { PICMAN_RGB_IMAGE => '0',
		       PICMAN_RGBA_IMAGE => '1',
		       PICMAN_GRAY_IMAGE => '2',
		       PICMAN_GRAYA_IMAGE => '3',
		       PICMAN_INDEXED_IMAGE => '4',
		       PICMAN_INDEXEDA_IMAGE => '5' }
	},
    PicmanInterpolationType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_INTERPOLATION_NONE PICMAN_INTERPOLATION_LINEAR
			  PICMAN_INTERPOLATION_CUBIC PICMAN_INTERPOLATION_NOHALO
			  PICMAN_INTERPOLATION_LOHALO) ],
	  mapping => { PICMAN_INTERPOLATION_NONE => '0',
		       PICMAN_INTERPOLATION_LINEAR => '1',
		       PICMAN_INTERPOLATION_CUBIC => '2',
		       PICMAN_INTERPOLATION_NOHALO => '3',
		       PICMAN_INTERPOLATION_LOHALO => '4' }
	},
    PicmanPaintApplicationMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_PAINT_CONSTANT PICMAN_PAINT_INCREMENTAL) ],
	  mapping => { PICMAN_PAINT_CONSTANT => '0',
		       PICMAN_PAINT_INCREMENTAL => '1' }
	},
    PicmanRepeatMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_REPEAT_NONE PICMAN_REPEAT_SAWTOOTH
			  PICMAN_REPEAT_TRIANGULAR) ],
	  mapping => { PICMAN_REPEAT_NONE => '0',
		       PICMAN_REPEAT_SAWTOOTH => '1',
		       PICMAN_REPEAT_TRIANGULAR => '2' }
	},
    PicmanRunMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_RUN_INTERACTIVE PICMAN_RUN_NONINTERACTIVE
			  PICMAN_RUN_WITH_LAST_VALS) ],
	  mapping => { PICMAN_RUN_INTERACTIVE => '0',
		       PICMAN_RUN_NONINTERACTIVE => '1',
		       PICMAN_RUN_WITH_LAST_VALS => '2' }
	},
    PicmanSizeType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_PIXELS PICMAN_POINTS) ],
	  mapping => { PICMAN_PIXELS => '0',
		       PICMAN_POINTS => '1' }
	},
    PicmanTransferMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_SHADOWS PICMAN_MIDTONES PICMAN_HIGHLIGHTS) ],
	  mapping => { PICMAN_SHADOWS => '0',
		       PICMAN_MIDTONES => '1',
		       PICMAN_HIGHLIGHTS => '2' }
	},
    PicmanTransformDirection =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_TRANSFORM_FORWARD PICMAN_TRANSFORM_BACKWARD) ],
	  mapping => { PICMAN_TRANSFORM_FORWARD => '0',
		       PICMAN_TRANSFORM_BACKWARD => '1' }
	},
    PicmanTransformResize =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_TRANSFORM_RESIZE_ADJUST
			  PICMAN_TRANSFORM_RESIZE_CLIP
			  PICMAN_TRANSFORM_RESIZE_CROP
			  PICMAN_TRANSFORM_RESIZE_CROP_WITH_ASPECT) ],
	  mapping => { PICMAN_TRANSFORM_RESIZE_ADJUST => '0',
		       PICMAN_TRANSFORM_RESIZE_CLIP => '1',
		       PICMAN_TRANSFORM_RESIZE_CROP => '2',
		       PICMAN_TRANSFORM_RESIZE_CROP_WITH_ASPECT => '3' }
	},
    PicmanUnit =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_UNIT_PIXEL PICMAN_UNIT_INCH PICMAN_UNIT_MM
			  PICMAN_UNIT_POINT PICMAN_UNIT_PICA PICMAN_UNIT_END) ],
	  mapping => { PICMAN_UNIT_PIXEL => '0',
		       PICMAN_UNIT_INCH => '1',
		       PICMAN_UNIT_MM => '2',
		       PICMAN_UNIT_POINT => '3',
		       PICMAN_UNIT_PICA => '4',
		       PICMAN_UNIT_END => '5' }
	},
    PicmanPDBArgType =>
	{ contig => 0,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_PDB_INT32 PICMAN_PDB_INT16 PICMAN_PDB_INT8
			  PICMAN_PDB_FLOAT PICMAN_PDB_STRING PICMAN_PDB_INT32ARRAY
			  PICMAN_PDB_INT16ARRAY PICMAN_PDB_INT8ARRAY
			  PICMAN_PDB_FLOATARRAY PICMAN_PDB_STRINGARRAY
			  PICMAN_PDB_COLOR PICMAN_PDB_ITEM PICMAN_PDB_DISPLAY
			  PICMAN_PDB_IMAGE PICMAN_PDB_LAYER PICMAN_PDB_CHANNEL
			  PICMAN_PDB_DRAWABLE PICMAN_PDB_SELECTION
			  PICMAN_PDB_COLORARRAY PICMAN_PDB_VECTORS
			  PICMAN_PDB_PARASITE PICMAN_PDB_STATUS PICMAN_PDB_END
			  PICMAN_PDB_PATH PICMAN_PDB_BOUNDARY PICMAN_PDB_REGION) ],
	  mapping => { PICMAN_PDB_INT32 => '0',
		       PICMAN_PDB_INT16 => '1',
		       PICMAN_PDB_INT8 => '2',
		       PICMAN_PDB_FLOAT => '3',
		       PICMAN_PDB_STRING => '4',
		       PICMAN_PDB_INT32ARRAY => '5',
		       PICMAN_PDB_INT16ARRAY => '6',
		       PICMAN_PDB_INT8ARRAY => '7',
		       PICMAN_PDB_FLOATARRAY => '8',
		       PICMAN_PDB_STRINGARRAY => '9',
		       PICMAN_PDB_COLOR => '10',
		       PICMAN_PDB_ITEM => '11',
		       PICMAN_PDB_DISPLAY => '12',
		       PICMAN_PDB_IMAGE => '13',
		       PICMAN_PDB_LAYER => '14',
		       PICMAN_PDB_CHANNEL => '15',
		       PICMAN_PDB_DRAWABLE => '16',
		       PICMAN_PDB_SELECTION => '17',
		       PICMAN_PDB_COLORARRAY => '18',
		       PICMAN_PDB_VECTORS => '19',
		       PICMAN_PDB_PARASITE => '20',
		       PICMAN_PDB_STATUS => '21',
		       PICMAN_PDB_END => '22',
		       PICMAN_PDB_PATH => 'PICMAN_PDB_VECTORS',
		       PICMAN_PDB_BOUNDARY => 'PICMAN_PDB_COLORARRAY',
		       PICMAN_PDB_REGION => 'PICMAN_PDB_ITEM' }
	},
    PicmanPDBErrorHandler =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_PDB_ERROR_HANDLER_INTERNAL
			  PICMAN_PDB_ERROR_HANDLER_PLUGIN) ],
	  mapping => { PICMAN_PDB_ERROR_HANDLER_INTERNAL => '0',
		       PICMAN_PDB_ERROR_HANDLER_PLUGIN => '1' }
	},
    PicmanPDBProcType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_INTERNAL PICMAN_PLUGIN PICMAN_EXTENSION
			  PICMAN_TEMPORARY) ],
	  mapping => { PICMAN_INTERNAL => '0',
		       PICMAN_PLUGIN => '1',
		       PICMAN_EXTENSION => '2',
		       PICMAN_TEMPORARY => '3' }
	},
    PicmanPDBStatusType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_PDB_EXECUTION_ERROR PICMAN_PDB_CALLING_ERROR
			  PICMAN_PDB_PASS_THROUGH PICMAN_PDB_SUCCESS
			  PICMAN_PDB_CANCEL) ],
	  mapping => { PICMAN_PDB_EXECUTION_ERROR => '0',
		       PICMAN_PDB_CALLING_ERROR => '1',
		       PICMAN_PDB_PASS_THROUGH => '2',
		       PICMAN_PDB_SUCCESS => '3',
		       PICMAN_PDB_CANCEL => '4' }
	},
    PicmanMessageHandlerType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_MESSAGE_BOX PICMAN_CONSOLE PICMAN_ERROR_CONSOLE) ],
	  mapping => { PICMAN_MESSAGE_BOX => '0',
		       PICMAN_CONSOLE => '1',
		       PICMAN_ERROR_CONSOLE => '2' }
	},
    PicmanStackTraceMode =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_STACK_TRACE_NEVER PICMAN_STACK_TRACE_QUERY
			  PICMAN_STACK_TRACE_ALWAYS) ],
	  mapping => { PICMAN_STACK_TRACE_NEVER => '0',
		       PICMAN_STACK_TRACE_QUERY => '1',
		       PICMAN_STACK_TRACE_ALWAYS => '2' }
	},
    PicmanProgressCommand =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_PROGRESS_COMMAND_START
			  PICMAN_PROGRESS_COMMAND_END
			  PICMAN_PROGRESS_COMMAND_SET_TEXT
			  PICMAN_PROGRESS_COMMAND_SET_VALUE
			  PICMAN_PROGRESS_COMMAND_PULSE
			  PICMAN_PROGRESS_COMMAND_GET_WINDOW) ],
	  mapping => { PICMAN_PROGRESS_COMMAND_START => '0',
		       PICMAN_PROGRESS_COMMAND_END => '1',
		       PICMAN_PROGRESS_COMMAND_SET_TEXT => '2',
		       PICMAN_PROGRESS_COMMAND_SET_VALUE => '3',
		       PICMAN_PROGRESS_COMMAND_PULSE => '4',
		       PICMAN_PROGRESS_COMMAND_GET_WINDOW => '5' }
	},
    PicmanTextDirection =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_TEXT_DIRECTION_LTR PICMAN_TEXT_DIRECTION_RTL) ],
	  mapping => { PICMAN_TEXT_DIRECTION_LTR => '0',
		       PICMAN_TEXT_DIRECTION_RTL => '1' }
	},
    PicmanTextHintStyle =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_TEXT_HINT_STYLE_NONE
			  PICMAN_TEXT_HINT_STYLE_SLIGHT
			  PICMAN_TEXT_HINT_STYLE_MEDIUM
			  PICMAN_TEXT_HINT_STYLE_FULL) ],
	  mapping => { PICMAN_TEXT_HINT_STYLE_NONE => '0',
		       PICMAN_TEXT_HINT_STYLE_SLIGHT => '1',
		       PICMAN_TEXT_HINT_STYLE_MEDIUM => '2',
		       PICMAN_TEXT_HINT_STYLE_FULL => '3' }
	},
    PicmanTextJustification =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_TEXT_JUSTIFY_LEFT PICMAN_TEXT_JUSTIFY_RIGHT
			  PICMAN_TEXT_JUSTIFY_CENTER PICMAN_TEXT_JUSTIFY_FILL) ],
	  mapping => { PICMAN_TEXT_JUSTIFY_LEFT => '0',
		       PICMAN_TEXT_JUSTIFY_RIGHT => '1',
		       PICMAN_TEXT_JUSTIFY_CENTER => '2',
		       PICMAN_TEXT_JUSTIFY_FILL => '3' }
	},
    PicmanUserDirectory =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_USER_DIRECTORY_DESKTOP
			  PICMAN_USER_DIRECTORY_DOCUMENTS
			  PICMAN_USER_DIRECTORY_DOWNLOAD
			  PICMAN_USER_DIRECTORY_MUSIC
			  PICMAN_USER_DIRECTORY_PICTURES
			  PICMAN_USER_DIRECTORY_PUBLIC_SHARE
			  PICMAN_USER_DIRECTORY_TEMPLATES
			  PICMAN_USER_DIRECTORY_VIDEOS) ],
	  mapping => { PICMAN_USER_DIRECTORY_DESKTOP => '0',
		       PICMAN_USER_DIRECTORY_DOCUMENTS => '1',
		       PICMAN_USER_DIRECTORY_DOWNLOAD => '2',
		       PICMAN_USER_DIRECTORY_MUSIC => '3',
		       PICMAN_USER_DIRECTORY_PICTURES => '4',
		       PICMAN_USER_DIRECTORY_PUBLIC_SHARE => '5',
		       PICMAN_USER_DIRECTORY_TEMPLATES => '6',
		       PICMAN_USER_DIRECTORY_VIDEOS => '7' }
	},
    PicmanVectorsStrokeType =>
	{ contig => 1,
	  header => 'libpicmanbase/picmanbaseenums.h',
	  symbols => [ qw(PICMAN_VECTORS_STROKE_TYPE_BEZIER) ],
	  mapping => { PICMAN_VECTORS_STROKE_TYPE_BEZIER => '0' }
	},
    PicmanConvertDitherType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_NO_DITHER PICMAN_FS_DITHER
			  PICMAN_FSLOWBLEED_DITHER PICMAN_FIXED_DITHER) ],
	  mapping => { PICMAN_NO_DITHER => '0',
		       PICMAN_FS_DITHER => '1',
		       PICMAN_FSLOWBLEED_DITHER => '2',
		       PICMAN_FIXED_DITHER => '3' }
	},
    PicmanConvertPaletteType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_MAKE_PALETTE PICMAN_REUSE_PALETTE
			  PICMAN_WEB_PALETTE PICMAN_MONO_PALETTE
			  PICMAN_CUSTOM_PALETTE) ],
	  mapping => { PICMAN_MAKE_PALETTE => '0',
		       PICMAN_REUSE_PALETTE => '1',
		       PICMAN_WEB_PALETTE => '2',
		       PICMAN_MONO_PALETTE => '3',
		       PICMAN_CUSTOM_PALETTE => '4' }
	},
    PicmanConvolutionType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_NORMAL_CONVOL PICMAN_ABSOLUTE_CONVOL
			  PICMAN_NEGATIVE_CONVOL) ],
	  mapping => { PICMAN_NORMAL_CONVOL => '0',
		       PICMAN_ABSOLUTE_CONVOL => '1',
		       PICMAN_NEGATIVE_CONVOL => '2' }
	},
    PicmanHistogramChannel =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_HISTOGRAM_VALUE PICMAN_HISTOGRAM_RED
			  PICMAN_HISTOGRAM_GREEN PICMAN_HISTOGRAM_BLUE
			  PICMAN_HISTOGRAM_ALPHA) ],
	  mapping => { PICMAN_HISTOGRAM_VALUE => '0',
		       PICMAN_HISTOGRAM_RED => '1',
		       PICMAN_HISTOGRAM_GREEN => '2',
		       PICMAN_HISTOGRAM_BLUE => '3',
		       PICMAN_HISTOGRAM_ALPHA => '4' }
	},
    PicmanHueRange =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_ALL_HUES PICMAN_RED_HUES PICMAN_YELLOW_HUES
			  PICMAN_GREEN_HUES PICMAN_CYAN_HUES PICMAN_BLUE_HUES
			  PICMAN_MAGENTA_HUES) ],
	  mapping => { PICMAN_ALL_HUES => '0',
		       PICMAN_RED_HUES => '1',
		       PICMAN_YELLOW_HUES => '2',
		       PICMAN_GREEN_HUES => '3',
		       PICMAN_CYAN_HUES => '4',
		       PICMAN_BLUE_HUES => '5',
		       PICMAN_MAGENTA_HUES => '6' }
	},
    PicmanLayerModeEffects =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_NORMAL_MODE PICMAN_DISSOLVE_MODE
			  PICMAN_BEHIND_MODE PICMAN_MULTIPLY_MODE
			  PICMAN_SCREEN_MODE PICMAN_OVERLAY_MODE
			  PICMAN_DIFFERENCE_MODE PICMAN_ADDITION_MODE
			  PICMAN_SUBTRACT_MODE PICMAN_DARKEN_ONLY_MODE
			  PICMAN_LIGHTEN_ONLY_MODE PICMAN_HUE_MODE
			  PICMAN_SATURATION_MODE PICMAN_COLOR_MODE
			  PICMAN_VALUE_MODE PICMAN_DIVIDE_MODE PICMAN_DODGE_MODE
			  PICMAN_BURN_MODE PICMAN_HARDLIGHT_MODE
			  PICMAN_SOFTLIGHT_MODE PICMAN_GRAIN_EXTRACT_MODE
			  PICMAN_GRAIN_MERGE_MODE PICMAN_COLOR_ERASE_MODE) ],
	  mapping => { PICMAN_NORMAL_MODE => '0',
		       PICMAN_DISSOLVE_MODE => '1',
		       PICMAN_BEHIND_MODE => '2',
		       PICMAN_MULTIPLY_MODE => '3',
		       PICMAN_SCREEN_MODE => '4',
		       PICMAN_OVERLAY_MODE => '5',
		       PICMAN_DIFFERENCE_MODE => '6',
		       PICMAN_ADDITION_MODE => '7',
		       PICMAN_SUBTRACT_MODE => '8',
		       PICMAN_DARKEN_ONLY_MODE => '9',
		       PICMAN_LIGHTEN_ONLY_MODE => '10',
		       PICMAN_HUE_MODE => '11',
		       PICMAN_SATURATION_MODE => '12',
		       PICMAN_COLOR_MODE => '13',
		       PICMAN_VALUE_MODE => '14',
		       PICMAN_DIVIDE_MODE => '15',
		       PICMAN_DODGE_MODE => '16',
		       PICMAN_BURN_MODE => '17',
		       PICMAN_HARDLIGHT_MODE => '18',
		       PICMAN_SOFTLIGHT_MODE => '19',
		       PICMAN_GRAIN_EXTRACT_MODE => '20',
		       PICMAN_GRAIN_MERGE_MODE => '21',
		       PICMAN_COLOR_ERASE_MODE => '22' }
	},
    PicmanFillType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_FOREGROUND_FILL PICMAN_BACKGROUND_FILL
			  PICMAN_WHITE_FILL PICMAN_TRANSPARENT_FILL
			  PICMAN_PATTERN_FILL) ],
	  mapping => { PICMAN_FOREGROUND_FILL => '0',
		       PICMAN_BACKGROUND_FILL => '1',
		       PICMAN_WHITE_FILL => '2',
		       PICMAN_TRANSPARENT_FILL => '3',
		       PICMAN_PATTERN_FILL => '4' }
	},
    PicmanBrushGeneratedShape =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_BRUSH_GENERATED_CIRCLE
			  PICMAN_BRUSH_GENERATED_SQUARE
			  PICMAN_BRUSH_GENERATED_DIAMOND) ],
	  mapping => { PICMAN_BRUSH_GENERATED_CIRCLE => '0',
		       PICMAN_BRUSH_GENERATED_SQUARE => '1',
		       PICMAN_BRUSH_GENERATED_DIAMOND => '2' }
	},
    PicmanOrientationType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_ORIENTATION_HORIZONTAL
			  PICMAN_ORIENTATION_VERTICAL PICMAN_ORIENTATION_UNKNOWN) ],
	  mapping => { PICMAN_ORIENTATION_HORIZONTAL => '0',
		       PICMAN_ORIENTATION_VERTICAL => '1',
		       PICMAN_ORIENTATION_UNKNOWN => '2' }
	},
    PicmanPrecision =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_PRECISION_U8 PICMAN_PRECISION_U16
			  PICMAN_PRECISION_U32 PICMAN_PRECISION_HALF
			  PICMAN_PRECISION_FLOAT) ],
	  mapping => { PICMAN_PRECISION_U8 => '0',
		       PICMAN_PRECISION_U16 => '1',
		       PICMAN_PRECISION_U32 => '2',
		       PICMAN_PRECISION_HALF => '3',
		       PICMAN_PRECISION_FLOAT => '4' }
	},
    PicmanRotationType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_ROTATE_90 PICMAN_ROTATE_180 PICMAN_ROTATE_270) ],
	  mapping => { PICMAN_ROTATE_90 => '0',
		       PICMAN_ROTATE_180 => '1',
		       PICMAN_ROTATE_270 => '2' }
	},
    PicmanOffsetType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_OFFSET_BACKGROUND PICMAN_OFFSET_TRANSPARENT) ],
	  mapping => { PICMAN_OFFSET_BACKGROUND => '0',
		       PICMAN_OFFSET_TRANSPARENT => '1' }
	},
    PicmanGradientSegmentType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_GRADIENT_SEGMENT_LINEAR
			  PICMAN_GRADIENT_SEGMENT_CURVED
			  PICMAN_GRADIENT_SEGMENT_SINE
			  PICMAN_GRADIENT_SEGMENT_SPHERE_INCREASING
			  PICMAN_GRADIENT_SEGMENT_SPHERE_DECREASING) ],
	  mapping => { PICMAN_GRADIENT_SEGMENT_LINEAR => '0',
		       PICMAN_GRADIENT_SEGMENT_CURVED => '1',
		       PICMAN_GRADIENT_SEGMENT_SINE => '2',
		       PICMAN_GRADIENT_SEGMENT_SPHERE_INCREASING => '3',
		       PICMAN_GRADIENT_SEGMENT_SPHERE_DECREASING => '4' }
	},
    PicmanGradientSegmentColor =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_GRADIENT_SEGMENT_RGB
			  PICMAN_GRADIENT_SEGMENT_HSV_CCW
			  PICMAN_GRADIENT_SEGMENT_HSV_CW) ],
	  mapping => { PICMAN_GRADIENT_SEGMENT_RGB => '0',
		       PICMAN_GRADIENT_SEGMENT_HSV_CCW => '1',
		       PICMAN_GRADIENT_SEGMENT_HSV_CW => '2' }
	},
    PicmanMaskApplyMode =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_MASK_APPLY PICMAN_MASK_DISCARD) ],
	  mapping => { PICMAN_MASK_APPLY => '0',
		       PICMAN_MASK_DISCARD => '1' }
	},
    PicmanMergeType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_EXPAND_AS_NECESSARY PICMAN_CLIP_TO_IMAGE
			  PICMAN_CLIP_TO_BOTTOM_LAYER PICMAN_FLATTEN_IMAGE) ],
	  mapping => { PICMAN_EXPAND_AS_NECESSARY => '0',
		       PICMAN_CLIP_TO_IMAGE => '1',
		       PICMAN_CLIP_TO_BOTTOM_LAYER => '2',
		       PICMAN_FLATTEN_IMAGE => '3' }
	},
    PicmanSelectCriterion =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(PICMAN_SELECT_CRITERION_COMPOSITE
			  PICMAN_SELECT_CRITERION_R PICMAN_SELECT_CRITERION_G
			  PICMAN_SELECT_CRITERION_B PICMAN_SELECT_CRITERION_H
			  PICMAN_SELECT_CRITERION_S PICMAN_SELECT_CRITERION_V) ],
	  mapping => { PICMAN_SELECT_CRITERION_COMPOSITE => '0',
		       PICMAN_SELECT_CRITERION_R => '1',
		       PICMAN_SELECT_CRITERION_G => '2',
		       PICMAN_SELECT_CRITERION_B => '3',
		       PICMAN_SELECT_CRITERION_H => '4',
		       PICMAN_SELECT_CRITERION_S => '5',
		       PICMAN_SELECT_CRITERION_V => '6' }
	},
    PicmanBrushApplicationMode =>
	{ contig => 1,
	  header => 'paint/paint-enums.h',
	  symbols => [ qw(PICMAN_BRUSH_HARD PICMAN_BRUSH_SOFT) ],
	  mapping => { PICMAN_BRUSH_HARD => '0',
		       PICMAN_BRUSH_SOFT => '1' }
	},
    PicmanConvolveType =>
	{ contig => 1,
	  header => 'paint/paint-enums.h',
	  symbols => [ qw(PICMAN_BLUR_CONVOLVE PICMAN_SHARPEN_CONVOLVE) ],
	  mapping => { PICMAN_BLUR_CONVOLVE => '0',
		       PICMAN_SHARPEN_CONVOLVE => '1' }
	},
    PicmanInkBlobType =>
	{ contig => 1,
	  header => 'paint/paint-enums.h',
	  symbols => [ qw(PICMAN_INK_BLOB_TYPE_CIRCLE
			  PICMAN_INK_BLOB_TYPE_SQUARE
			  PICMAN_INK_BLOB_TYPE_DIAMOND) ],
	  mapping => { PICMAN_INK_BLOB_TYPE_CIRCLE => '0',
		       PICMAN_INK_BLOB_TYPE_SQUARE => '1',
		       PICMAN_INK_BLOB_TYPE_DIAMOND => '2' }
	}
);

foreach $e (values %enums) {
    $e->{info} = "";
    foreach (@{$e->{symbols}}) {
	$e->{info} .= "$_ ($e->{mapping}->{$_}), "
    }
    $e->{info} =~ s/, $//;
}

1;
