/* LIBPICMAN - The PICMAN Library
 * Copyright (C) 1995-2003 Peter Mattis and Spencer Kimball
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

/* NOTE: This file is autogenerated by enumcode.pl */

#ifndef __PICMAN_ENUMS_H__
#define __PICMAN_ENUMS_H__

G_BEGIN_DECLS


#define PICMAN_TYPE_BRUSH_APPLICATION_MODE (picman_brush_application_mode_get_type ())

GType picman_brush_application_mode_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_BRUSH_HARD,
  PICMAN_BRUSH_SOFT
} PicmanBrushApplicationMode;


#define PICMAN_TYPE_BRUSH_GENERATED_SHAPE (picman_brush_generated_shape_get_type ())

GType picman_brush_generated_shape_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_BRUSH_GENERATED_CIRCLE,
  PICMAN_BRUSH_GENERATED_SQUARE,
  PICMAN_BRUSH_GENERATED_DIAMOND
} PicmanBrushGeneratedShape;


#define PICMAN_TYPE_CONVERT_DITHER_TYPE (picman_convert_dither_type_get_type ())

GType picman_convert_dither_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_NO_DITHER,
  PICMAN_FS_DITHER,
  PICMAN_FSLOWBLEED_DITHER,
  PICMAN_FIXED_DITHER
} PicmanConvertDitherType;


#define PICMAN_TYPE_CONVERT_PALETTE_TYPE (picman_convert_palette_type_get_type ())

GType picman_convert_palette_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_MAKE_PALETTE,
  PICMAN_REUSE_PALETTE,
  PICMAN_WEB_PALETTE,
  PICMAN_MONO_PALETTE,
  PICMAN_CUSTOM_PALETTE
} PicmanConvertPaletteType;


#define PICMAN_TYPE_CONVOLUTION_TYPE (picman_convolution_type_get_type ())

GType picman_convolution_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_NORMAL_CONVOL,
  PICMAN_ABSOLUTE_CONVOL,
  PICMAN_NEGATIVE_CONVOL
} PicmanConvolutionType;


#define PICMAN_TYPE_CONVOLVE_TYPE (picman_convolve_type_get_type ())

GType picman_convolve_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_BLUR_CONVOLVE,
  PICMAN_SHARPEN_CONVOLVE
} PicmanConvolveType;


#define PICMAN_TYPE_FILL_TYPE (picman_fill_type_get_type ())

GType picman_fill_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_FOREGROUND_FILL,
  PICMAN_BACKGROUND_FILL,
  PICMAN_WHITE_FILL,
  PICMAN_TRANSPARENT_FILL,
  PICMAN_PATTERN_FILL
} PicmanFillType;


#define PICMAN_TYPE_GRADIENT_SEGMENT_COLOR (picman_gradient_segment_color_get_type ())

GType picman_gradient_segment_color_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_GRADIENT_SEGMENT_RGB,
  PICMAN_GRADIENT_SEGMENT_HSV_CCW,
  PICMAN_GRADIENT_SEGMENT_HSV_CW
} PicmanGradientSegmentColor;


#define PICMAN_TYPE_GRADIENT_SEGMENT_TYPE (picman_gradient_segment_type_get_type ())

GType picman_gradient_segment_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_GRADIENT_SEGMENT_LINEAR,
  PICMAN_GRADIENT_SEGMENT_CURVED,
  PICMAN_GRADIENT_SEGMENT_SINE,
  PICMAN_GRADIENT_SEGMENT_SPHERE_INCREASING,
  PICMAN_GRADIENT_SEGMENT_SPHERE_DECREASING
} PicmanGradientSegmentType;


#define PICMAN_TYPE_HISTOGRAM_CHANNEL (picman_histogram_channel_get_type ())

GType picman_histogram_channel_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_HISTOGRAM_VALUE,
  PICMAN_HISTOGRAM_RED,
  PICMAN_HISTOGRAM_GREEN,
  PICMAN_HISTOGRAM_BLUE,
  PICMAN_HISTOGRAM_ALPHA
} PicmanHistogramChannel;


#define PICMAN_TYPE_HUE_RANGE (picman_hue_range_get_type ())

GType picman_hue_range_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_ALL_HUES,
  PICMAN_RED_HUES,
  PICMAN_YELLOW_HUES,
  PICMAN_GREEN_HUES,
  PICMAN_CYAN_HUES,
  PICMAN_BLUE_HUES,
  PICMAN_MAGENTA_HUES
} PicmanHueRange;


#define PICMAN_TYPE_INK_BLOB_TYPE (picman_ink_blob_type_get_type ())

GType picman_ink_blob_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_INK_BLOB_TYPE_CIRCLE,
  PICMAN_INK_BLOB_TYPE_SQUARE,
  PICMAN_INK_BLOB_TYPE_DIAMOND
} PicmanInkBlobType;


#define PICMAN_TYPE_LAYER_MODE_EFFECTS (picman_layer_mode_effects_get_type ())

GType picman_layer_mode_effects_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_NORMAL_MODE,
  PICMAN_DISSOLVE_MODE,
  PICMAN_BEHIND_MODE,
  PICMAN_MULTIPLY_MODE,
  PICMAN_SCREEN_MODE,
  PICMAN_OVERLAY_MODE,
  PICMAN_DIFFERENCE_MODE,
  PICMAN_ADDITION_MODE,
  PICMAN_SUBTRACT_MODE,
  PICMAN_DARKEN_ONLY_MODE,
  PICMAN_LIGHTEN_ONLY_MODE,
  PICMAN_HUE_MODE,
  PICMAN_SATURATION_MODE,
  PICMAN_COLOR_MODE,
  PICMAN_VALUE_MODE,
  PICMAN_DIVIDE_MODE,
  PICMAN_DODGE_MODE,
  PICMAN_BURN_MODE,
  PICMAN_HARDLIGHT_MODE,
  PICMAN_SOFTLIGHT_MODE,
  PICMAN_GRAIN_EXTRACT_MODE,
  PICMAN_GRAIN_MERGE_MODE,
  PICMAN_COLOR_ERASE_MODE
} PicmanLayerModeEffects;


#define PICMAN_TYPE_MASK_APPLY_MODE (picman_mask_apply_mode_get_type ())

GType picman_mask_apply_mode_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_MASK_APPLY,
  PICMAN_MASK_DISCARD
} PicmanMaskApplyMode;


#define PICMAN_TYPE_MERGE_TYPE (picman_merge_type_get_type ())

GType picman_merge_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_EXPAND_AS_NECESSARY,
  PICMAN_CLIP_TO_IMAGE,
  PICMAN_CLIP_TO_BOTTOM_LAYER,
  PICMAN_FLATTEN_IMAGE
} PicmanMergeType;


#define PICMAN_TYPE_OFFSET_TYPE (picman_offset_type_get_type ())

GType picman_offset_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_OFFSET_BACKGROUND,
  PICMAN_OFFSET_TRANSPARENT
} PicmanOffsetType;


#define PICMAN_TYPE_ORIENTATION_TYPE (picman_orientation_type_get_type ())

GType picman_orientation_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_ORIENTATION_HORIZONTAL,
  PICMAN_ORIENTATION_VERTICAL,
  PICMAN_ORIENTATION_UNKNOWN
} PicmanOrientationType;


#define PICMAN_TYPE_PRECISION (picman_precision_get_type ())

GType picman_precision_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_PRECISION_U8,
  PICMAN_PRECISION_U16,
  PICMAN_PRECISION_U32,
  PICMAN_PRECISION_HALF,
  PICMAN_PRECISION_FLOAT
} PicmanPrecision;


#define PICMAN_TYPE_ROTATION_TYPE (picman_rotation_type_get_type ())

GType picman_rotation_type_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_ROTATE_90,
  PICMAN_ROTATE_180,
  PICMAN_ROTATE_270
} PicmanRotationType;


#define PICMAN_TYPE_SELECT_CRITERION (picman_select_criterion_get_type ())

GType picman_select_criterion_get_type (void) G_GNUC_CONST;

typedef enum
{
  PICMAN_SELECT_CRITERION_COMPOSITE,
  PICMAN_SELECT_CRITERION_R,
  PICMAN_SELECT_CRITERION_G,
  PICMAN_SELECT_CRITERION_B,
  PICMAN_SELECT_CRITERION_H,
  PICMAN_SELECT_CRITERION_S,
  PICMAN_SELECT_CRITERION_V
} PicmanSelectCriterion;


void           picman_enums_init           (void);

const gchar ** picman_enums_get_type_names (gint *n_type_names);


G_END_DECLS

#endif /* __PICMAN_ENUMS_H__ */
